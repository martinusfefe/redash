{"version":3,"file":"referenceCountingCache.js","names":["_lodash","require","createReferenceCountingCache","_ref","arguments","length","undefined","_ref$cleanupDelay","cleanupDelay","items","cleanup","debounce","each","item","key","refCount","get","getter","value","release"],"sources":["../../src/lib/referenceCountingCache.ts"],"sourcesContent":["import { each, debounce } from \"lodash\";\n\nexport default function createReferenceCountingCache({ cleanupDelay = 2000 } = {}) {\n  const items = {};\n\n  const cleanup = debounce(() => {\n    each(items, (item, key) => {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'refCount' does not exist on type 'never'... Remove this comment to see the full error message\n      if (item.refCount <= 0) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        delete items[key];\n      }\n    });\n  }, cleanupDelay);\n\n  function get(key: any, getter: any) {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    if (!items[key]) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      items[key] = {\n        value: getter(),\n        refCount: 0,\n      };\n    }\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    const item = items[key];\n    item.refCount += 1;\n    return item.value;\n  }\n\n  function release(key: any) {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    if (items[key]) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const item = items[key];\n      if (item.refCount > 0) {\n        item.refCount -= 1;\n        if (item.refCount <= 0) {\n          cleanup();\n        }\n      }\n    }\n  }\n\n  return { get, release };\n}\n"],"mappings":";;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AAEe,SAASC,4BAA4BA,CAAA,EAA+B;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,CAAC,CAAC;IAAAG,iBAAA,GAAAJ,IAAA,CAA1BK,YAAY;IAAZA,YAAY,GAAAD,iBAAA,cAAG,IAAI,GAAAA,iBAAA;EACxE,IAAME,KAAK,GAAG,CAAC,CAAC;EAEhB,IAAMC,OAAO,GAAG,IAAAC,gBAAQ,EAAC,MAAM;IAC7B,IAAAC,YAAI,EAACH,KAAK,EAAE,CAACI,IAAI,EAAEC,GAAG,KAAK;MACzB;MACA,IAAID,IAAI,CAACE,QAAQ,IAAI,CAAC,EAAE;QACtB;QACA,OAAON,KAAK,CAACK,GAAG,CAAC;MACnB;IACF,CAAC,CAAC;EACJ,CAAC,EAAEN,YAAY,CAAC;EAEhB,SAASQ,GAAGA,CAACF,GAAQ,EAAEG,MAAW,EAAE;IAClC;IACA,IAAI,CAACR,KAAK,CAACK,GAAG,CAAC,EAAE;MACf;MACAL,KAAK,CAACK,GAAG,CAAC,GAAG;QACXI,KAAK,EAAED,MAAM,CAAC,CAAC;QACfF,QAAQ,EAAE;MACZ,CAAC;IACH;IACA;IACA,IAAMF,IAAI,GAAGJ,KAAK,CAACK,GAAG,CAAC;IACvBD,IAAI,CAACE,QAAQ,IAAI,CAAC;IAClB,OAAOF,IAAI,CAACK,KAAK;EACnB;EAEA,SAASC,OAAOA,CAACL,GAAQ,EAAE;IACzB;IACA,IAAIL,KAAK,CAACK,GAAG,CAAC,EAAE;MACd;MACA,IAAMD,IAAI,GAAGJ,KAAK,CAACK,GAAG,CAAC;MACvB,IAAID,IAAI,CAACE,QAAQ,GAAG,CAAC,EAAE;QACrBF,IAAI,CAACE,QAAQ,IAAI,CAAC;QAClB,IAAIF,IAAI,CAACE,QAAQ,IAAI,CAAC,EAAE;UACtBL,OAAO,CAAC,CAAC;QACX;MACF;IACF;EACF;EAEA,OAAO;IAAEM,GAAG;IAAEG;EAAQ,CAAC;AACzB"}
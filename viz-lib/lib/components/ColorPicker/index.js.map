{"version":3,"file":"index.js","names":["toString","React","useState","useEffect","useMemo","cx","Popover","Card","Tooltip","chooseTextColorForBackground","CloseOutlinedIcon","CheckOutlinedIcon","ColorInput","Swatch","Label","validateColor","ColorPicker","_ref","color","placement","presetColors","presetColumns","interactive","children","onChange","triggerProps","addonBefore","addonAfter","_useState","_useState2","_slicedToArray","visible","setVisible","validatedColor","_useState3","_useState4","currentColor","setCurrentColor","handleApply","handleCancel","actions","push","createElement","key","title","onClick","handleInputChange","newColor","className","arrowPointAtCenter","overlayClassName","concat","overlayStyle","content","bordered","toUpperCase","headStyle","backgroundColor","onPressEnter","trigger","onVisibleChange","_extends","size","defaultProps","Input"],"sources":["../../../src/components/ColorPicker/index.tsx"],"sourcesContent":["import { toString } from \"lodash\";\nimport React, { useState, useEffect, useMemo } from \"react\";\nimport cx from \"classnames\";\nimport Popover from \"antd/lib/popover\";\nimport Card from \"antd/lib/card\";\nimport Tooltip from \"antd/lib/tooltip\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\n\nimport CloseOutlinedIcon from \"@ant-design/icons/CloseOutlined\";\nimport CheckOutlinedIcon from \"@ant-design/icons/CheckOutlined\";\n\nimport ColorInput from \"./Input\";\nimport Swatch from \"./Swatch\";\nimport Label from \"./Label\";\nimport { validateColor } from \"./utils\";\n\nimport \"./index.less\";\n\ntype OwnProps = {\n  color?: string;\n  placement?:\n    | \"top\"\n    | \"left\"\n    | \"right\"\n    | \"bottom\"\n    | \"topLeft\"\n    | \"topRight\"\n    | \"bottomLeft\"\n    | \"bottomRight\"\n    | \"leftTop\"\n    | \"leftBottom\"\n    | \"rightTop\"\n    | \"rightBottom\";\n  presetColors?:\n    | string[]\n    | {\n        [key: string]: string;\n      };\n  presetColumns?: number;\n  interactive?: boolean;\n  triggerProps?: any;\n  children?: React.ReactNode;\n  addonBefore?: React.ReactNode;\n  addonAfter?: React.ReactNode;\n  onChange?: (...args: any[]) => any;\n};\n\ntype Props = OwnProps & typeof ColorPicker.defaultProps;\n\nexport default function ColorPicker({\n  color,\n  placement,\n  presetColors,\n  presetColumns,\n  interactive,\n  children,\n  onChange,\n  triggerProps,\n  addonBefore,\n  addonAfter,\n}: Props) {\n  const [visible, setVisible] = useState(false);\n  const validatedColor = useMemo(() => validateColor(color), [color]);\n  const [currentColor, setCurrentColor] = useState(\"\");\n\n  function handleApply() {\n    setVisible(false);\n    if (!interactive) {\n      // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\n      onChange(currentColor);\n    }\n  }\n\n  function handleCancel() {\n    setVisible(false);\n  }\n\n  const actions = [];\n  if (!interactive) {\n    actions.push(\n      <Tooltip key=\"cancel\" title=\"Cancel\">\n        <CloseOutlinedIcon onClick={handleCancel} />\n      </Tooltip>\n    );\n    actions.push(\n      <Tooltip key=\"apply\" title=\"Apply\">\n        <CheckOutlinedIcon onClick={handleApply} />\n      </Tooltip>\n    );\n  }\n\n  function handleInputChange(newColor: any) {\n    setCurrentColor(newColor);\n    if (interactive) {\n      // @ts-expect-error ts-migrate(2349) FIXME: This expression is not callable.\n      onChange(newColor);\n    }\n  }\n\n  useEffect(() => {\n    if (visible) {\n      // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'string | null' is not assignable... Remove this comment to see the full error message\n      setCurrentColor(validatedColor);\n    }\n  }, [validatedColor, visible]);\n\n  return (\n    <span className=\"color-picker-wrapper\">\n      {addonBefore}\n      <Popover\n        arrowPointAtCenter\n        overlayClassName={`color-picker ${interactive ? \"color-picker-interactive\" : \"color-picker-with-actions\"}`}\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ \"--color-picker-selected-color\": string; }... Remove this comment to see the full error message\n        overlayStyle={{ \"--color-picker-selected-color\": currentColor }}\n        content={\n          <Card\n            data-test=\"ColorPicker\"\n            className=\"color-picker-panel\"\n            bordered={false}\n            title={toString(currentColor).toUpperCase()}\n            headStyle={{\n              backgroundColor: currentColor,\n              // @ts-expect-error ts-migrate(2322) FIXME: Type 'string | null | undefined' is not assignable... Remove this comment to see the full error message\n              color: chooseTextColorForBackground(currentColor),\n            }}\n            actions={actions}>\n            <ColorInput\n              // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n              color={currentColor}\n              presetColors={presetColors}\n              presetColumns={presetColumns}\n              // @ts-expect-error ts-migrate(2322) FIXME: Type '(newColor: any) => void' is not assignable t... Remove this comment to see the full error message\n              onChange={handleInputChange}\n              // @ts-expect-error ts-migrate(2322) FIXME: Type '() => void' is not assignable to type 'never... Remove this comment to see the full error message\n              onPressEnter={handleApply}\n            />\n          </Card>\n        }\n        trigger=\"click\"\n        placement={placement}\n        visible={visible}\n        onVisibleChange={setVisible}>\n        {children || (\n          <Swatch\n            color={validatedColor}\n            size={30}\n            {...triggerProps}\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'className' does not exist on type 'never... Remove this comment to see the full error message\n            className={cx(\"color-picker-trigger\", triggerProps.className)}\n          />\n        )}\n      </Popover>\n      {addonAfter}\n    </span>\n  );\n}\n\nColorPicker.defaultProps = {\n  color: \"#FFFFFF\",\n  placement: \"top\",\n  presetColors: null,\n  presetColumns: 8,\n  interactive: false,\n  triggerProps: {},\n  children: null,\n  addonBefore: null,\n  addonAfter: null,\n  onChange: () => {},\n};\n\nColorPicker.Input = ColorInput;\nColorPicker.Swatch = Swatch;\nColorPicker.Label = Label;\n"],"mappings":"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"}
{"version":3,"file":"prepareData.js","names":["_","moment","momentInterval","weekly","daily","monthly","groupData","sortedData","result","each","item","date","groupKey","valueOf","total","parseInt","values","stage","value","prepareDiagonalData","options","timeInterval","grouped","firstStage","min","map","i","stageCount","last","diff","first","lastStage","previousDate","data","group","Math","abs","row","push","prepareSimpleData","stages","max","isDataValid","rawData","columnNames","columns","c","name","rows","length","includes","dateColumn","stageColumn","totalColumn","valueColumn","prepareData","initialDate","parseFloat","sortBy","r","toDate","mode"],"sources":["../../../src/visualizations/cohort/prepareData.ts"],"sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nconst momentInterval = {\n  weekly: \"weeks\",\n  daily: \"days\",\n  monthly: \"months\",\n};\n\nfunction groupData(sortedData: any) {\n  const result = {};\n\n  _.each(sortedData, item => {\n    const date = moment(item.date);\n    const groupKey = date.valueOf();\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    result[groupKey] = result[groupKey] || {\n      date,\n      total: parseInt(item.total, 10) || 0,\n      values: {},\n    };\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    result[groupKey].values[item.stage] = parseInt(item.value, 10) || null;\n  });\n\n  return _.values(result);\n}\n\nfunction prepareDiagonalData(sortedData: any, options: any) {\n  const timeInterval = options.timeInterval;\n  const grouped = groupData(sortedData);\n  const firstStage = _.min(_.map(sortedData, i => i.stage));\n  // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n  const stageCount = moment(_.last(grouped).date).diff(_.first(grouped).date, momentInterval[timeInterval]);\n  let lastStage = firstStage + stageCount;\n\n  let previousDate: any = null;\n\n  const data: any = [];\n  _.each(grouped, group => {\n    if (previousDate !== null) {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      let diff = Math.abs(previousDate.diff(group.date, momentInterval[timeInterval]));\n      while (diff > 1) {\n        const row = [0];\n        for (let stage = firstStage; stage <= lastStage; stage += 1) {\n          // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n          row.push(group.values[stage] || 0);\n        }\n        data.push(row);\n        // It should be diagonal, so decrease count of stages for each next row\n        lastStage -= 1;\n        diff -= 1;\n      }\n    }\n\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n    previousDate = group.date;\n\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n    const row = [group.total];\n    for (let stage = firstStage; stage <= lastStage; stage += 1) {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      row.push(group.values[stage] || 0);\n    }\n    // It should be diagonal, so decrease count of stages for each next row\n    lastStage -= 1;\n\n    data.push(row);\n  });\n\n  return data;\n}\n\nfunction prepareSimpleData(sortedData: any, options: any) {\n  const timeInterval = options.timeInterval;\n  const grouped = groupData(sortedData);\n  const stages = _.map(sortedData, i => i.stage);\n  const firstStage = _.min(stages);\n  const lastStage = _.max(stages);\n\n  let previousDate: any = null;\n\n  const data: any = [];\n  _.each(grouped, group => {\n    if (previousDate !== null) {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      let diff = Math.abs(previousDate.diff(group.date, momentInterval[timeInterval]));\n      while (diff > 1) {\n        data.push([0]);\n        diff -= 1;\n      }\n    }\n\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n    previousDate = group.date;\n\n    // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n    const row = [group.total];\n    for (let stage = firstStage; stage <= lastStage; stage += 1) {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      row.push(group.values[stage]);\n    }\n\n    data.push(row);\n  });\n\n  return data;\n}\n\nfunction isDataValid(rawData: any, options: any) {\n  const columnNames = _.map(rawData.columns, c => c.name);\n  return (\n    rawData.rows.length > 0 &&\n    _.includes(columnNames, options.dateColumn) &&\n    _.includes(columnNames, options.stageColumn) &&\n    _.includes(columnNames, options.totalColumn) &&\n    _.includes(columnNames, options.valueColumn)\n  );\n}\n\nexport default function prepareData(rawData: any, options: any) {\n  if (!isDataValid(rawData, options)) {\n    return { data: [], initialDate: null };\n  }\n\n  rawData = _.map(rawData.rows, item => ({\n    date: item[options.dateColumn],\n    stage: parseInt(item[options.stageColumn], 10),\n    total: parseFloat(item[options.totalColumn]),\n    value: parseFloat(item[options.valueColumn]),\n  }));\n  const sortedData = _.sortBy(rawData, r => r.date + r.stage);\n  const initialDate = moment(sortedData[0].date).toDate();\n\n  let data;\n  switch (options.mode) {\n    case \"simple\":\n      data = prepareSimpleData(sortedData, options);\n      break;\n    default:\n      data = prepareDiagonalData(sortedData, options);\n      break;\n  }\n\n  return { data, initialDate };\n}\n"],"mappings":"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"}
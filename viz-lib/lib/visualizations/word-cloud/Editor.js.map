{"version":3,"file":"Editor.js","names":["map","merge","React","Grid","Section","Select","InputNumber","ControlLabel","EditorPropTypes","Editor","_ref","options","data","onOptionsChange","optionsChanged","newOptions","createElement","Fragment","label","value","column","onChange","columns","_ref2","name","Option","key","frequenciesColumn","_ref3","Row","gutter","type","Col","span","placeholder","min","wordLengthLimit","max","wordCountLimit","propTypes"],"sources":["../../../src/visualizations/word-cloud/Editor.tsx"],"sourcesContent":["import { map, merge } from \"lodash\";\nimport React from \"react\";\nimport * as Grid from \"antd/lib/grid\";\nimport { Section, Select, InputNumber, ControlLabel } from \"@/components/visualizations/editor\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\n\nexport default function Editor({ options, data, onOptionsChange }: any) {\n  const optionsChanged = (newOptions: any) => {\n    onOptionsChange(merge({}, options, newOptions));\n  };\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Words Column\"\n          data-test=\"WordCloud.WordsColumn\"\n          value={options.column}\n          onChange={(column: any) => optionsChanged({ column })}>\n          {map(data.columns, ({ name }) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={name} data-test={\"WordCloud.WordsColumn.\" + name}>\n              {name}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Frequencies Column\"\n          data-test=\"WordCloud.FrequenciesColumn\"\n          value={options.frequenciesColumn}\n          onChange={(frequenciesColumn: any) => optionsChanged({ frequenciesColumn })}>\n          {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          <Select.Option key=\"none\" value=\"\">\n            <i>(count word frequencies automatically)</i>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n          </Select.Option>\n          {map(data.columns, ({ name }) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={\"column-\" + name} value={name} data-test={\"WordCloud.FrequenciesColumn.\" + name}>\n              {name}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'null | un... Remove this comment to see the full error message */}\n        <ControlLabel label=\"Words Length Limit\">\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\n          <Grid.Row gutter={15} type=\"flex\">\n            <Grid.Col span={12}>\n              <InputNumber\n                data-test=\"WordCloud.WordLengthLimit.Min\"\n                placeholder=\"Min\"\n                min={0}\n                value={options.wordLengthLimit.min}\n                onChange={(value: any) => optionsChanged({ wordLengthLimit: { min: value > 0 ? value : null } })}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <InputNumber\n                data-test=\"WordCloud.WordLengthLimit.Max\"\n                placeholder=\"Max\"\n                min={0}\n                value={options.wordLengthLimit.max}\n                onChange={(value: any) => optionsChanged({ wordLengthLimit: { max: value > 0 ? value : null } })}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </ControlLabel>\n      </Section>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'null | un... Remove this comment to see the full error message */}\n        <ControlLabel label=\"Frequencies Limit\">\n          {/* @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message */}\n          <Grid.Row gutter={15} type=\"flex\">\n            <Grid.Col span={12}>\n              <InputNumber\n                data-test=\"WordCloud.WordCountLimit.Min\"\n                placeholder=\"Min\"\n                min={0}\n                value={options.wordCountLimit.min}\n                onChange={(value: any) => optionsChanged({ wordCountLimit: { min: value > 0 ? value : null } })}\n              />\n            </Grid.Col>\n            <Grid.Col span={12}>\n              <InputNumber\n                data-test=\"WordCloud.WordCountLimit.Max\"\n                placeholder=\"Max\"\n                min={0}\n                value={options.wordCountLimit.max}\n                onChange={(value: any) => optionsChanged({ wordCountLimit: { max: value > 0 ? value : null } })}\n              />\n            </Grid.Col>\n          </Grid.Row>\n        </ControlLabel>\n      </Section>\n    </React.Fragment>\n  );\n}\n\nEditor.propTypes = EditorPropTypes;\n"],"mappings":"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"}
{"version":3,"file":"initSunburst.js","names":["d3","has","map","keys","groupBy","sortBy","filter","find","compact","first","every","identity","exitNode","colors","scale","category10","colorMap","d","name","getAncestors","node","path","current","parent","unshift","buildNodesFromHierarchyData","data","grouped","value","sorted","size","sequence","nodes","i","buildNodesFromTableData","validKey","key","dataKeys","row","isDataInHierarchyFormat","firstRow","field","buildHierarchy","root","children","forEach","parseInt","currentNode","_loop","nodeName","j","isLeaf","length","push","childNode","child","isDataValid","rows","initSunburst","element","select","selectAll","remove","width","clientWidth","height","offsetHeight","b","w","h","s","t","radius","Math","min","margin","top","bottom","left","right","totalSize","partition","layout","PI","arc","svg","startAngle","x","endAngle","dx","innerRadius","sqrt","y","outerRadius","dy","vis","breadcrumbs","append","classed","attr","container","summary","sunburst","concat","lastCrumb","breadcrumbPoints","points","join","updateBreadcrumbs","ancestors","percentageString","g","depth","breadcrumb","enter","text","exit","mouseover","percentage","toPrecision","indexOf","html","style","click","on","transition","duration","each","endClick","uniqueNames","a","output","domain","__data__"],"sources":["../../../src/visualizations/sunburst/initSunburst.ts"],"sourcesContent":["/**\n * The following is based on @chrisrzhou's example from: http://bl.ocks.org/chrisrzhou/d5bdd8546f64ca0e4366.\n */\n\nimport * as d3 from \"d3\";\nimport { has, map, keys, groupBy, sortBy, filter, find, compact, first, every, identity } from \"lodash\";\n\nconst exitNode = \"<<<Exit>>>\";\n// @ts-expect-error ts-migrate(2339) FIXME: Property 'scale' does not exist on type 'typeof im... Remove this comment to see the full error message\nconst colors = d3.scale.category10();\n\n// helper function colorMap - color gray if \"end\" is detected\nfunction colorMap(d: any) {\n  return colors(d.name);\n}\n\n// Return array of ancestors of nodes, highest first, but excluding the root.\nfunction getAncestors(node: any) {\n  const path = [];\n  let current = node;\n\n  while (current.parent) {\n    path.unshift(current);\n    current = current.parent;\n  }\n  return path;\n}\n\nfunction buildNodesFromHierarchyData(data: any) {\n  const grouped = groupBy(data, \"sequence\");\n\n  return map(grouped, value => {\n    const sorted = sortBy(value, \"stage\");\n    return {\n      size: value[0].value || 0,\n      sequence: value[0].sequence,\n      nodes: map(sorted, i => i.node),\n    };\n  });\n}\n\nfunction buildNodesFromTableData(data: any) {\n  const validKey = (key: any) => key !== \"value\";\n  const dataKeys = sortBy(filter(keys(data[0]), validKey), identity);\n\n  return map(data, (row, sequence) => ({\n    size: row.value || 0,\n    sequence,\n    nodes: compact(map(dataKeys, key => row[key])),\n  }));\n}\n\nfunction isDataInHierarchyFormat(data: any) {\n  const firstRow = first(data);\n  return every([\"sequence\", \"stage\", \"node\", \"value\"], field => has(firstRow, field));\n}\n\nfunction buildHierarchy(data: any) {\n  data = isDataInHierarchyFormat(data) ? buildNodesFromHierarchyData(data) : buildNodesFromTableData(data);\n\n  // build tree\n  const root = {\n    name: \"root\",\n    children: [],\n  };\n\n  data.forEach((d: any) => {\n    const nodes = d.nodes;\n    const size = parseInt(d.size, 10);\n\n    // build graph, nodes, and child nodes\n    let currentNode = root;\n    for (let j = 0; j < nodes.length; j += 1) {\n      let children = currentNode.children;\n      const nodeName = nodes[j];\n      const isLeaf = j + 1 === nodes.length;\n\n      if (!children) {\n        currentNode.children = children = [];\n        children.push({\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          name: exitNode,\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n          size: currentNode.size,\n        });\n      }\n\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'name' does not exist on type 'never'.\n      let childNode = find(children, child => child.name === nodeName);\n\n      if (isLeaf && childNode) {\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type 'never'... Remove this comment to see the full error message\n        childNode.children = childNode.children || [];\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'children' does not exist on type 'never'... Remove this comment to see the full error message\n        childNode.children.push({\n          name: exitNode,\n          size,\n        });\n      } else if (isLeaf) {\n        children.push({\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n          name: nodeName,\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'number' is not assignable to type 'never'.\n          size,\n        });\n      } else {\n        if (!childNode) {\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ name: any; children: never[]; }' is not as... Remove this comment to see the full error message\n          childNode = {\n            name: nodeName,\n            children: [],\n          };\n          // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'undefined' is not assignable to ... Remove this comment to see the full error message\n          children.push(childNode);\n        }\n\n        // @ts-expect-error ts-migrate(2322) FIXME: Type 'undefined' is not assignable to type '{ name... Remove this comment to see the full error message\n        currentNode = childNode;\n      }\n    }\n  });\n\n  return root;\n}\n\nfunction isDataValid(data: any) {\n  return data && data.rows.length > 0;\n}\n\nexport default function initSunburst(data: any) {\n  if (!isDataValid(data)) {\n    return (element: any) => {\n      d3.select(element)\n        .selectAll(\"*\")\n        .remove();\n    };\n  }\n\n  data = buildHierarchy(data.rows);\n\n  return (element: any) => {\n    d3.select(element)\n      .selectAll(\"*\")\n      .remove();\n\n    // svg dimensions\n    const width = element.clientWidth;\n    const height = element.offsetHeight;\n\n    // Breadcrumb dimensions: width, height, spacing, width of tip/tail.\n    const b = {\n      w: width / 6,\n      h: 30,\n      s: 3,\n      t: 10,\n    };\n\n    const radius = Math.min(width - b.h, height - b.h) / 2 - 5;\n    if (radius <= 0) {\n      return;\n    }\n\n    // margins\n    const margin = {\n      top: radius,\n      bottom: 50,\n      left: radius,\n      right: 0,\n    };\n\n    // Drawing variables: e.g. colors, totalSize, partitions, arcs\n\n    // Total size of all nodes, to be used later when data is loaded\n    let totalSize = 0;\n\n    // create d3.layout.partition\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'layout' does not exist on type 'typeof i... Remove this comment to see the full error message\n    const partition = d3.layout\n      .partition()\n      .size([2 * Math.PI, radius * radius])\n      .value((d: any) => d.size);\n\n    // create arcs for drawing D3 paths\n    const arc = d3.svg\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'arc' does not exist on type '(url: strin... Remove this comment to see the full error message\n      .arc()\n      .startAngle((d: any) => d.x)\n      .endAngle((d: any) => d.x + d.dx)\n      .innerRadius((d: any) => Math.sqrt(d.y))\n      .outerRadius((d: any) => Math.sqrt(d.y + d.dy));\n\n    /**\n     * Define and initialize D3 select references and div-containers\n     *\n     * e.g. vis, breadcrumbs, lastCrumb, summary, sunburst, legend\n     */\n    const vis = d3.select(element);\n\n    // create and position breadcrumbs container and svg\n    const breadcrumbs = vis\n      .append(\"div\")\n      .classed(\"breadcrumbs-container\", true)\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", b.h)\n      .attr(\"fill\", \"white\")\n      .attr(\"font-weight\", 600);\n\n    // create and position SVG\n    const container = vis.append(\"div\");\n\n    // create and position summary container\n    const summary = container.append(\"div\").classed(\"summary-container\", true);\n\n    const sunburst = container\n      .append(\"div\")\n      .classed(\"sunburst-container\", true)\n      .append(\"svg\")\n      .attr(\"width\", radius * 2)\n      .attr(\"height\", radius * 2)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // create last breadcrumb element\n    const lastCrumb = breadcrumbs.append(\"text\").classed(\"lastCrumb\", true);\n\n    // Generate a string representation for drawing a breadcrumb polygon.\n    function breadcrumbPoints(d: any, i: any) {\n      const points = [];\n      points.push(\"0,0\");\n      points.push(`${b.w},0`);\n      points.push(`${b.w + b.t},${b.h / 2}`);\n      points.push(`${b.w},${b.h}`);\n      points.push(`0,${b.h}`);\n\n      if (i > 0) {\n        // Leftmost breadcrumb; don't include 6th vertex.\n        points.push(`${b.t},${b.h / 2}`);\n      }\n      return points.join(\" \");\n    }\n\n    // Update the breadcrumb breadcrumbs to show the current sequence and percentage.\n    function updateBreadcrumbs(ancestors: any, percentageString: any) {\n      // Data join, where primary key = name + depth.\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      const g = breadcrumbs.selectAll(\"g\").data(ancestors, d => d.name + d.depth);\n\n      // Add breadcrumb and label for entering nodes.\n      const breadcrumb = g.enter().append(\"g\");\n\n      breadcrumb\n        .append(\"polygon\")\n        .classed(\"breadcrumbs-shape\", true)\n        .attr(\"points\", breadcrumbPoints)\n        .attr(\"fill\", colorMap);\n\n      breadcrumb\n        .append(\"text\")\n        .classed(\"breadcrumbs-text\", true)\n        .attr(\"x\", (b.w + b.t) / 2)\n        .attr(\"y\", b.h / 2)\n        .attr(\"dy\", \"0.35em\")\n        .attr(\"font-size\", \"10px\")\n        .attr(\"text-anchor\", \"middle\")\n        // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n        .text(d => d.name);\n\n      // Set position for entering and updating nodes.\n      g.attr(\"transform\", (d, i) => `translate(${i * (b.w + b.s)}, 0)`);\n\n      // Remove exiting nodes.\n      g.exit().remove();\n\n      // Update percentage at the lastCrumb.\n      lastCrumb\n        .attr(\"x\", (ancestors.length + 0.5) * (b.w + b.s))\n        .attr(\"y\", b.h / 2)\n        .attr(\"dy\", \"0.35em\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"fill\", \"black\")\n        .attr(\"font-weight\", 600)\n        .text(percentageString);\n    }\n\n    // helper function mouseover to handle mouseover events/animations and calculation\n    // of ancestor nodes etc\n    function mouseover(d: any) {\n      // build percentage string\n      const percentage = ((100 * d.value) / totalSize).toPrecision(3);\n      let percentageString = `${percentage}%`;\n      // @ts-expect-error ts-migrate(2365) FIXME: Operator '<' cannot be applied to types 'string' a... Remove this comment to see the full error message\n      if (percentage < 1) {\n        percentageString = \"< 1.0%\";\n      }\n\n      // update breadcrumbs (get all ancestors)\n      const ancestors = getAncestors(d);\n      updateBreadcrumbs(ancestors, percentageString);\n\n      // update sunburst (Fade all the segments and highlight only ancestors of current segment)\n      sunburst.selectAll(\"path\").attr(\"opacity\", 0.3);\n      sunburst\n        .selectAll(\"path\")\n        .filter(node => ancestors.indexOf(node) >= 0)\n        .attr(\"opacity\", 1);\n\n      // update summary\n      summary.html(`\n      <span>Stage: ${d.depth}</span>\n      <span class='percentage' style='font-size: 2em;'>${percentageString}</span>\n      <span>${d.value} of ${totalSize}</span>\n    `);\n\n      // display summary and breadcrumbs if hidden\n      summary.style(\"visibility\", \"\");\n      breadcrumbs.style(\"visibility\", \"\");\n    }\n\n    // helper function click to handle mouseleave events/animations\n    function click() {\n      // Deactivate all segments then retransition each segment to full opacity.\n      sunburst.selectAll(\"path\").on(\"mouseover\", null);\n      sunburst\n        .selectAll(\"path\")\n        .transition()\n        .duration(1000)\n        .attr(\"opacity\", 1)\n        // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 2.\n        .each(\"end\", function endClick() {\n          // @ts-expect-error ts-migrate(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message\n          d3.select(this).on(\"mouseover\", mouseover);\n        });\n\n      // hide summary and breadcrumbs if visible\n      breadcrumbs.style(\"visibility\", \"hidden\");\n      summary.style(\"visibility\", \"hidden\");\n    }\n\n    // Build only nodes of a threshold \"visible\" sizes to improve efficiency\n    // 0.005 radians = 0.29 degrees\n    const nodes = partition.nodes(data).filter((d: any) => d.dx > 0.005 && d.name !== exitNode);\n\n    // this section is required to update the colors.domain() every time the data updates\n    const uniqueNames = (function uniqueNames(a) {\n      const output: any = [];\n      a.forEach((d: any) => {\n        if (output.indexOf(d.name) === -1) output.push(d.name);\n      });\n      return output;\n    })(nodes);\n    colors.domain(uniqueNames); // update domain colors\n\n    // create path based on nodes\n    const path = sunburst\n      .data([data])\n      .selectAll(\"path\")\n      .data(nodes)\n      .enter()\n      .append(\"path\")\n      .classed(\"nodePath\", true)\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      .attr(\"display\", d => (d.depth ? null : \"none\"))\n      .attr(\"d\", arc)\n      .attr(\"fill\", colorMap)\n      .attr(\"opacity\", 1)\n      .attr(\"stroke\", \"white\")\n      .on(\"mouseover\", mouseover);\n\n    // // trigger mouse click over sunburst to reset visualization summary\n    vis.on(\"click\", click);\n\n    // Update totalSize of the tree = value of root node from partition.\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    totalSize = path.node().__data__.value;\n  };\n}\n"],"mappings":"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"}
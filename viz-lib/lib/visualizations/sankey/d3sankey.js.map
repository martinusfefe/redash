{"version":3,"file":"d3sankey.js","names":["d3","center","node","y","dy","value","link","Sankey","sankey","nodeWidth","nodePadding","size","nodes","links","computeNodeLinks","forEach","sourceLinks","targetLinks","source","target","push","computeNodeValues","Math","max","sum","moveSinksRight","x","length","scaleNodeBreadths","kx","computeNodeBreadths","remainingNodes","nextNodes","assignBreadth","dx","indexOf","n","computeNodeDepths","iterations","nodesByBreadth","nest","key","d","sortKeys","ascending","entries","map","values","initializeNodeDepth","ky","min","i","relaxLeftToRight","alpha","weightedSource","resolveCollisions","y0","sort","ascendingDepth","relaxRightToLeft","slice","reverse","weightedTarget","a","b","computeLinkDepths","ascendingTargetDepth","ascendingSourceDepth","sy","ty","_","arguments","layout","relayout","curvature","x0","x1","xi","interpolateNumber","x2","x3","y1","concat"],"sources":["../../../src/visualizations/sankey/d3sankey.ts"],"sourcesContent":["/* eslint-disable */\n\nimport * as d3 from \"d3\";\n\nexport interface LinkType {\n  id: number;\n  name: string;\n  color: string;\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  source: SourceTargetType;\n  target: SourceTargetType;\n}\n\nexport type SourceTargetType = {\n  sourceLinks: Array<LinkType>;\n  targetLinks: Array<LinkType>;\n};\n\nexport type NodeType = LinkType & SourceTargetType;\nexport interface D3SankeyType {\n  nodeWidth: (...args: any[]) => any;\n  nodeHeight: (...args: any[]) => any;\n  nodePadding: (...args: any[]) => any;\n  nodes: (...args: any[]) => any[];\n  link: (...args: any[]) => any;\n  links: (...args: any[]) => any[];\n  size: (...args: any[]) => any;\n  layout: (...args: any[]) => any;\n  relayout: (...args: any[]) => any;\n}\n\nexport type DType = { sy: number; ty: number; value: number; source: LinkType; target: LinkType } & LinkType;\n\nfunction center(node: any) {\n  return node.y + node.dy / 2;\n}\n\nfunction value(link: any) {\n  return link.value;\n}\n\nfunction Sankey(): D3SankeyType {\n  const sankey = {};\n  let nodeWidth = 24;\n  let nodePadding = 8;\n  let size = [1, 1];\n  let nodes: any[] = [];\n  let links: any[] = [];\n\n  // Populate the sourceLinks and targetLinks for each node.\n  // Also, if the source and target are not objects, assume they are indices.\n  function computeNodeLinks() {\n    nodes.forEach(node => {\n      node.sourceLinks = [];\n      node.targetLinks = [];\n    });\n    links.forEach(link => {\n      let source = link.source;\n      let target = link.target;\n      if (typeof source === \"number\") source = link.source = nodes[link.source];\n      if (typeof target === \"number\") target = link.target = nodes[link.target];\n      source.sourceLinks.push(link);\n      target.targetLinks.push(link);\n    });\n  }\n\n  // Compute the value (size) of each node by summing the associated links.\n  function computeNodeValues() {\n    nodes.forEach(node => {\n      node.value = Math.max(d3.sum(node.sourceLinks, value), d3.sum(node.targetLinks, value));\n    });\n  }\n\n  function moveSinksRight(x: any) {\n    nodes.forEach(node => {\n      if (!node.sourceLinks.length) {\n        node.x = x - 1;\n      }\n    });\n  }\n\n  function scaleNodeBreadths(kx: any) {\n    nodes.forEach(node => {\n      node.x *= kx;\n    });\n  }\n\n  // Iteratively assign the breadth (x-position) for each node.\n  // Nodes are assigned the maximum breadth of incoming neighbors plus one;\n  // nodes with no incoming links are assigned breadth zero, while\n  // nodes with no outgoing links are assigned the maximum breadth.\n  function computeNodeBreadths() {\n    let remainingNodes = nodes;\n    let nextNodes: any;\n    let x = 0;\n\n    function assignBreadth(node: any) {\n      node.x = x;\n      node.dx = nodeWidth;\n      node.sourceLinks.forEach((link: any) => {\n        if (nextNodes.indexOf(link.target) < 0) {\n          nextNodes.push(link.target);\n        }\n      });\n    }\n\n    while (remainingNodes.length) {\n      nextNodes = [];\n      remainingNodes.forEach(assignBreadth);\n      remainingNodes = nextNodes;\n      x += 1;\n    }\n\n    moveSinksRight(x);\n    x = Math.max(\n      d3.max(nodes, n => n.x),\n      2\n    ); // get new maximum x value (min 2)\n    scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));\n  }\n\n  function computeNodeDepths(iterations: any) {\n    const nodesByBreadth = d3\n      // @ts-expect-error\n      .nest()\n      .key((d: any) => d.x)\n      .sortKeys(d3.ascending)\n      .entries(nodes)\n      .map((d: any) => d.values);\n\n    function initializeNodeDepth() {\n      // @ts-expect-error ts-migrate(2571) FIXME: Object is of type 'unknown'.\n      const ky = d3.min(nodesByBreadth, n => (size[1] - (n.length - 1) * nodePadding) / d3.sum(n, value));\n\n      nodesByBreadth.forEach((n: any) => {\n        n.forEach((node: any, i: any) => {\n          node.y = i;\n          // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n          node.dy = node.value * ky;\n        });\n      });\n\n      links.forEach(link => {\n        // @ts-expect-error ts-migrate(2532) FIXME: Object is possibly 'undefined'.\n        link.dy = link.value * ky;\n      });\n    }\n\n    function relaxLeftToRight(alpha: any) {\n      function weightedSource(link: any) {\n        return center(link.source) * link.value;\n      }\n\n      nodesByBreadth.forEach((n: any) => {\n        n.forEach((node: any) => {\n          if (node.targetLinks.length) {\n            const y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);\n            node.y += (y - center(node)) * alpha;\n          }\n        });\n      });\n    }\n\n    function resolveCollisions() {\n      nodesByBreadth.forEach((nodes: any) => {\n        const n = nodes.length;\n        let node;\n        let dy;\n        let y0 = 0;\n        let i;\n\n        // Push any overlapping nodes down.\n        nodes.sort(ascendingDepth);\n        for (i = 0; i < n; ++i) {\n          node = nodes[i];\n          dy = y0 - node.y;\n          if (dy > 0) node.y += dy;\n          y0 = node.y + node.dy + nodePadding;\n        }\n\n        // If the bottommost node goes outside the bounds, push it back up.\n        dy = y0 - nodePadding - size[1];\n        if (dy > 0) {\n          y0 = node.y -= dy;\n\n          // Push any overlapping nodes back up.\n          for (i = n - 2; i >= 0; --i) {\n            node = nodes[i];\n            dy = node.y + node.dy + nodePadding - y0;\n            if (dy > 0) node.y -= dy;\n            y0 = node.y;\n          }\n        }\n      });\n    }\n\n    initializeNodeDepth();\n    resolveCollisions();\n\n    for (let alpha = 1; iterations > 0; iterations -= 1) {\n      relaxRightToLeft((alpha *= 0.99));\n      resolveCollisions();\n      relaxLeftToRight(alpha);\n      resolveCollisions();\n    }\n\n    function relaxRightToLeft(alpha: any) {\n      nodesByBreadth\n        .slice()\n        .reverse()\n        .forEach((nodes: any) => {\n          nodes.forEach((node: any) => {\n            if (node.sourceLinks.length) {\n              const y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);\n              node.y += (y - center(node)) * alpha;\n            }\n          });\n        });\n\n      function weightedTarget(link: any) {\n        return center(link.target) * link.value;\n      }\n    }\n\n    function ascendingDepth(a: any, b: any) {\n      return a.y - b.y;\n    }\n  }\n\n  function computeLinkDepths() {\n    nodes.forEach(node => {\n      node.sourceLinks.sort(ascendingTargetDepth);\n      node.targetLinks.sort(ascendingSourceDepth);\n    });\n    nodes.forEach(node => {\n      let sy = 0,\n        ty = 0;\n      node.sourceLinks.forEach((link: any) => {\n        link.sy = sy;\n        sy += link.dy;\n      });\n      node.targetLinks.forEach((link: any) => {\n        link.ty = ty;\n        ty += link.dy;\n      });\n    });\n\n    function ascendingSourceDepth(a: any, b: any) {\n      return a.source.y - b.source.y;\n    }\n\n    function ascendingTargetDepth(a: any, b: any) {\n      return a.target.y - b.target.y;\n    }\n  }\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodeWidth' does not exist on type '{}'.\n  sankey.nodeWidth = function(_: any) {\n    if (!arguments.length) return nodeWidth;\n    nodeWidth = +_;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodePadding' does not exist on type '{}'... Remove this comment to see the full error message\n  sankey.nodePadding = function(_: any) {\n    if (!arguments.length) return nodePadding;\n    nodePadding = +_;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'nodes' does not exist on type '{}'.\n  sankey.nodes = function(_: any) {\n    if (!arguments.length) return nodes;\n    nodes = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'links' does not exist on type '{}'.\n  sankey.links = function(_: any) {\n    if (!arguments.length) return links;\n    links = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'size' does not exist on type '{}'.\n  sankey.size = function(_: any) {\n    if (!arguments.length) return size;\n    size = _;\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'layout' does not exist on type '{}'.\n  sankey.layout = function(iterations: any) {\n    computeNodeLinks();\n    computeNodeValues();\n    computeNodeBreadths();\n    computeNodeDepths(iterations);\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'relayout' does not exist on type '{}'.\n  sankey.relayout = function() {\n    computeLinkDepths();\n    return sankey;\n  };\n\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'link' does not exist on type '{}'.\n  sankey.link = function() {\n    let curvature = 0.5;\n\n    function link(d: DType) {\n      const x0 = d.source.x + d.source.dx;\n      const x1 = d.target.x;\n      const xi = d3.interpolateNumber(x0, x1);\n      const x2 = xi(curvature);\n      const x3 = xi(1 - curvature);\n      const y0 = d.source.y + d.sy + d.dy / 2;\n      const y1 = d.target.y + d.ty + d.dy / 2;\n\n      return `M${x0},${y0}C${x2},${y0} ${x3},${y1} ${x1},${y1}`;\n    }\n\n    link.curvature = (_: any) => {\n      if (!arguments.length) return curvature;\n      curvature = +_;\n      return link;\n    };\n\n    return link;\n  };\n\n  return sankey as D3SankeyType;\n}\n\nexport default Sankey;\n"],"mappings":"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"}
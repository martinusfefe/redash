{"version":3,"file":"utils.test.js","names":["_utils","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","dummy","describe","beforeEach","rows","city","population","options","visualisationName","result","counterLabel","counterValue","targetValue","counterValueTooltip","targetValueTooltip","test","getCounterData","expect","toEqual","showTrend","rowNumber","result2","counterColName","targetRowNumber","targetColName","trendPositive","countRow"],"sources":["../../../src/visualizations/counter/utils.test.ts"],"sourcesContent":["import { getCounterData } from \"./utils\";\n\nlet dummy: any;\n\ndescribe(\"Visualizations -> Counter -> Utils\", () => {\n  beforeEach(() => {\n    dummy = {\n      rows: [\n        { city: \"New York City\", population: 18604000 },\n        { city: \"Shangai\", population: 24484000 },\n        { city: \"Tokyo\", population: 38140000 },\n      ],\n      options: {},\n      visualisationName: \"Visualisation Name\",\n      result: {\n        counterLabel: \"Visualisation Name\",\n        counterValue: \"\",\n        targetValue: null,\n        counterValueTooltip: \"\",\n        targetValueTooltip: \"\",\n      },\n    };\n  });\n\n  describe(\"getCounterData()\", () => {\n    describe('\"Count rows\" option is disabled', () => {\n      test(\"No target and counter values return empty result\", () => {\n        const result = getCounterData(dummy.rows, dummy.options, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter label\" overrides vizualization name', () => {\n        const result = getCounterData(dummy.rows, { counterLabel: \"Counter Label\" }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterLabel: \"Counter Label\",\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter Value Column Name\" must be set to a correct non empty value', () => {\n        const result = getCounterData(dummy.rows, { rowNumber: 3 }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n\n        const result2 = getCounterData(dummy.rows, { counterColName: \"missingColumn\" }, dummy.visualisationName);\n        expect(result2).toEqual({\n          ...dummy.result,\n          showTrend: false,\n        });\n      });\n\n      test('\"Counter Value Column Name\" uses correct column', () => {\n        const result = getCounterData(dummy.rows, { counterColName: \"population\" }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"18,604,000.000\",\n          counterValueTooltip: \"18,604,000\",\n          showTrend: false,\n        });\n      });\n\n      test(\"Counter and target values return correct result including trend\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            rowNumber: 1,\n            counterColName: \"population\",\n            targetRowNumber: 2,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"18,604,000.000\",\n          counterValueTooltip: \"18,604,000\",\n          targetValue: \"24484000\",\n          targetValueTooltip: \"24,484,000\",\n          showTrend: true,\n          trendPositive: false,\n        });\n\n        const result2 = getCounterData(\n          dummy.rows,\n          {\n            rowNumber: 2,\n            counterColName: \"population\",\n            targetRowNumber: 1,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result2).toEqual({\n          ...dummy.result,\n          counterValue: \"24,484,000.000\",\n          counterValueTooltip: \"24,484,000\",\n          targetValue: \"18604000\",\n          targetValueTooltip: \"18,604,000\",\n          showTrend: true,\n          trendPositive: true,\n        });\n      });\n    });\n\n    describe('\"Count rows\" option is enabled', () => {\n      beforeEach(() => {\n        dummy.result = {\n          ...dummy.result,\n          counterValue: \"3.000\",\n          counterValueTooltip: \"3\",\n          showTrend: false,\n        };\n      });\n\n      test(\"Rows are counted correctly\", () => {\n        const result = getCounterData(dummy.rows, { countRow: true }, dummy.visualisationName);\n        expect(result).toEqual(dummy.result);\n      });\n\n      test(\"Counter value is ignored\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            countRow: true,\n            rowNumber: 3,\n            counterColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual(dummy.result);\n      });\n\n      test(\"Target value and trend are computed correctly\", () => {\n        const result = getCounterData(\n          dummy.rows,\n          {\n            countRow: true,\n            targetRowNumber: 2,\n            targetColName: \"population\",\n          },\n          dummy.visualisationName\n        );\n        expect(result).toEqual({\n          ...dummy.result,\n          targetValue: \"24484000\",\n          targetValueTooltip: \"24,484,000\",\n          showTrend: true,\n          trendPositive: false,\n        });\n      });\n\n      test(\"Empty rows return counter value 0\", () => {\n        const result = getCounterData([], { countRow: true }, dummy.visualisationName);\n        expect(result).toEqual({\n          ...dummy.result,\n          counterValue: \"0.000\",\n          counterValueTooltip: \"0\",\n        });\n      });\n    });\n  });\n});\n"],"mappings":"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"}
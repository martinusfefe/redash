{"version":3,"file":"text.js","names":["React","HtmlContent","Section","Checkbox","createTextFormatter","Editor","_ref","column","onChange","createElement","Fragment","checked","allowHTML","event","target","highlightLinks","initTextColumn","format","prepareData","row","text","name","TextColumn","_ref2","_prepareData","friendlyName"],"sources":["../../../../src/visualizations/table/columns/text.tsx"],"sourcesContent":["import React from \"react\";\nimport HtmlContent from \"@/components/HtmlContent\";\nimport { Section, Checkbox } from \"@/components/visualizations/editor\";\nimport { createTextFormatter } from \"@/lib/value-format\";\n\ntype Props = {\n  column: {\n    name: string;\n    allowHTML?: boolean;\n    highlightLinks?: boolean;\n  };\n  onChange: (...args: any[]) => any;\n};\n\nfunction Editor({ column, onChange }: Props) {\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Table.ColumnEditor.Text.AllowHTML\"\n          checked={column.allowHTML}\n          onChange={event => onChange({ allowHTML: event.target.checked })}>\n          Allow HTML content\n        </Checkbox>\n      </Section>\n\n      {column.allowHTML && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Table.ColumnEditor.Text.HighlightLinks\"\n            checked={column.highlightLinks}\n            onChange={event => onChange({ highlightLinks: event.target.checked })}>\n            Highlight links\n          </Checkbox>\n        </Section>\n      )}\n    </React.Fragment>\n  );\n}\n\nexport default function initTextColumn(column: any) {\n  const format = createTextFormatter(column.allowHTML && column.highlightLinks);\n\n  function prepareData(row: any) {\n    return {\n      text: format(row[column.name]),\n    };\n  }\n\n  function TextColumn({ row }: any) {\n    // eslint-disable-line react/prop-types\n    const { text } = prepareData(row);\n    return column.allowHTML ? <HtmlContent>{text}</HtmlContent> : text;\n  }\n\n  TextColumn.prepareData = prepareData;\n\n  return TextColumn;\n}\n\ninitTextColumn.friendlyName = \"Text\";\ninitTextColumn.Editor = Editor;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW;AAClB,SAASC,OAAO,EAAEC,QAAQ;AAC1B,SAASC,mBAAmB;AAW5B,SAASC,MAAMA,CAAAC,IAAA,EAA8B;EAAA,IAA3BC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAEC,SAAQ,GAAAF,IAAA,CAARE,QAAQ;EAChC,oBACER,KAAA,CAAAS,aAAA,CAACT,KAAK,CAACU,QAAQ,qBAEbV,KAAA,CAAAS,aAAA,CAACP,OAAO,qBACNF,KAAA,CAAAS,aAAA,CAACN,QAAQ;IACP,aAAU,mCAAmC;IAC7CQ,OAAO,EAAEJ,MAAM,CAACK,SAAU;IAC1BJ,QAAQ,EAAEK,KAAK,IAAIL,SAAQ,CAAC;MAAEI,SAAS,EAAEC,KAAK,CAACC,MAAM,CAACH;IAAQ,CAAC;EAAE,GAAC,oBAE1D,CACH,CAAC,EAETJ,MAAM,CAACK,SAAS;EAAA;EACf;EACAZ,KAAA,CAAAS,aAAA,CAACP,OAAO,qBACNF,KAAA,CAAAS,aAAA,CAACN,QAAQ;IACP,aAAU,wCAAwC;IAClDQ,OAAO,EAAEJ,MAAM,CAACQ,cAAe;IAC/BP,QAAQ,EAAEK,KAAK,IAAIL,SAAQ,CAAC;MAAEO,cAAc,EAAEF,KAAK,CAACC,MAAM,CAACH;IAAQ,CAAC;EAAE,GAAC,iBAE/D,CACH,CAEG,CAAC;AAErB;AAEA,eAAe,SAASK,cAAcA,CAACT,MAAW,EAAE;EAClD,IAAMU,MAAM,GAAGb,mBAAmB,CAACG,MAAM,CAACK,SAAS,IAAIL,MAAM,CAACQ,cAAc,CAAC;EAE7E,SAASG,WAAWA,CAACC,GAAQ,EAAE;IAC7B,OAAO;MACLC,IAAI,EAAEH,MAAM,CAACE,GAAG,CAACZ,MAAM,CAACc,IAAI,CAAC;IAC/B,CAAC;EACH;EAEA,SAASC,UAAUA,CAAAC,KAAA,EAAe;IAAA,IAAZJ,GAAG,GAAAI,KAAA,CAAHJ,GAAG;IACvB;IACA,IAAAK,YAAA,GAAiBN,WAAW,CAACC,GAAG,CAAC;MAAzBC,IAAI,GAAAI,YAAA,CAAJJ,IAAI;IACZ,OAAOb,MAAM,CAACK,SAAS,gBAAGZ,KAAA,CAAAS,aAAA,CAACR,WAAW,QAAEmB,IAAkB,CAAC,GAAGA,IAAI;EACpE;EAEAE,UAAU,CAACJ,WAAW,GAAGA,WAAW;EAEpC,OAAOI,UAAU;AACnB;AAEAN,cAAc,CAACS,YAAY,GAAG,MAAM;AACpCT,cAAc,CAACX,MAAM,GAAGA,MAAM"}
{"version":3,"file":"getOptions.js","names":["isNil","merge","first","keys","get","visualizationsSettings","ColorPalette","getDefaultMap","choroplethAvailableMaps","DEFAULT_OPTIONS","mapType","keyColumn","targetField","valueColumn","clusteringMode","steps","valueFormat","noValuePlaceholder","colors","min","max","background","White","borders","noValue","legend","visible","position","alignText","tooltip","enabled","template","popup","getOptions","options","result","bounds","countryCodeColumn","countryCodeType"],"sources":["../../../src/visualizations/choropleth/getOptions.ts"],"sourcesContent":["import { isNil, merge, first, keys, get } from \"lodash\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\nimport ColorPalette from \"./ColorPalette\";\n\nfunction getDefaultMap() {\n  return first(keys(visualizationsSettings.choroplethAvailableMaps)) || null;\n}\n\nconst DEFAULT_OPTIONS = {\n  mapType: \"countries\",\n  keyColumn: null,\n  targetField: null,\n  valueColumn: null,\n  clusteringMode: \"e\",\n  steps: 5,\n  valueFormat: \"0,0.00\",\n  noValuePlaceholder: \"N/A\",\n  colors: {\n    min: ColorPalette[\"Light Blue\"],\n    max: ColorPalette[\"Dark Blue\"],\n    background: ColorPalette.White,\n    borders: ColorPalette.White,\n    noValue: ColorPalette[\"Light Gray\"],\n  },\n  legend: {\n    visible: true,\n    position: \"bottom-left\",\n    alignText: \"right\",\n  },\n  tooltip: {\n    enabled: true,\n    template: \"<b>{{ @@name }}</b>: {{ @@value }}\",\n  },\n  popup: {\n    enabled: true,\n    template: \"Country: <b>{{ @@name_long }} ({{ @@iso_a2 }})</b>\\n<br>\\nValue: <b>{{ @@value }}</b>\",\n  },\n};\n\nexport default function getOptions(options: any) {\n  const result = merge({}, DEFAULT_OPTIONS, options);\n\n  // Both renderer and editor always provide new `bounds` array, so no need to clone it here.\n  // Keeping original object also reduces amount of updates in components\n  result.bounds = get(options, \"bounds\");\n\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n  if (isNil(visualizationsSettings.choroplethAvailableMaps[result.mapType])) {\n    result.mapType = getDefaultMap();\n  }\n\n  // backward compatibility\n  if (!isNil(result.countryCodeColumn)) {\n    result.keyColumn = result.countryCodeColumn;\n  }\n  delete result.countryCodeColumn;\n\n  if (!isNil(result.countryCodeType)) {\n    result.targetField = result.countryCodeType;\n  }\n  delete result.countryCodeType;\n\n  return result;\n}\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,IAAI,EAAEC,GAAG,QAAQ,QAAQ;AACvD,SAASC,sBAAsB;AAC/B,OAAOC,YAAY;AAEnB,SAASC,aAAaA,CAAA,EAAG;EACvB,OAAOL,KAAK,CAACC,IAAI,CAACE,sBAAsB,CAACG,uBAAuB,CAAC,CAAC,IAAI,IAAI;AAC5E;AAEA,IAAMC,eAAe,GAAG;EACtBC,OAAO,EAAE,WAAW;EACpBC,SAAS,EAAE,IAAI;EACfC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE,IAAI;EACjBC,cAAc,EAAE,GAAG;EACnBC,KAAK,EAAE,CAAC;EACRC,WAAW,EAAE,QAAQ;EACrBC,kBAAkB,EAAE,KAAK;EACzBC,MAAM,EAAE;IACNC,GAAG,EAAEb,YAAY,CAAC,YAAY,CAAC;IAC/Bc,GAAG,EAAEd,YAAY,CAAC,WAAW,CAAC;IAC9Be,UAAU,EAAEf,YAAY,CAACgB,KAAK;IAC9BC,OAAO,EAAEjB,YAAY,CAACgB,KAAK;IAC3BE,OAAO,EAAElB,YAAY,CAAC,YAAY;EACpC,CAAC;EACDmB,MAAM,EAAE;IACNC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,aAAa;IACvBC,SAAS,EAAE;EACb,CAAC;EACDC,OAAO,EAAE;IACPC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE;EACZ,CAAC;EACDC,KAAK,EAAE;IACLF,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE;EACZ;AACF,CAAC;AAED,eAAe,SAASE,UAAUA,CAACC,OAAY,EAAE;EAC/C,IAAMC,MAAM,GAAGlC,KAAK,CAAC,CAAC,CAAC,EAAEQ,eAAe,EAAEyB,OAAO,CAAC;;EAElD;EACA;EACAC,MAAM,CAACC,MAAM,GAAGhC,GAAG,CAAC8B,OAAO,EAAE,QAAQ,CAAC;;EAEtC;EACA,IAAIlC,KAAK,CAACK,sBAAsB,CAACG,uBAAuB,CAAC2B,MAAM,CAACzB,OAAO,CAAC,CAAC,EAAE;IACzEyB,MAAM,CAACzB,OAAO,GAAGH,aAAa,CAAC,CAAC;EAClC;;EAEA;EACA,IAAI,CAACP,KAAK,CAACmC,MAAM,CAACE,iBAAiB,CAAC,EAAE;IACpCF,MAAM,CAACxB,SAAS,GAAGwB,MAAM,CAACE,iBAAiB;EAC7C;EACA,OAAOF,MAAM,CAACE,iBAAiB;EAE/B,IAAI,CAACrC,KAAK,CAACmC,MAAM,CAACG,eAAe,CAAC,EAAE;IAClCH,MAAM,CAACvB,WAAW,GAAGuB,MAAM,CAACG,eAAe;EAC7C;EACA,OAAOH,MAAM,CAACG,eAAe;EAE7B,OAAOH,MAAM;AACf"}
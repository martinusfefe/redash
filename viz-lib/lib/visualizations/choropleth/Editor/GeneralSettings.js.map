{"version":3,"file":"GeneralSettings.js","names":["_lodash","require","_react","_interopRequireWildcard","Grid","_propTypes","_editor","_visualizationsSettings","_useLoadGeoJson3","_interopRequireDefault","_utils","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","GeneralSettings","_ref","options","data","onOptionsChange","_useLoadGeoJson","useLoadGeoJson","mapType","_useLoadGeoJson2","geoJson","isLoadingGeoJson","geoJsonFields","useMemo","getGeoJsonFields","targetFields","filter","targetField","isString","fieldNames","visualizationsSettings","concat","handleMapChange","useCallback","createElement","Fragment","Section","Select","label","defaultValue","onChange","map","choroplethAvailableMaps","_","Option","Row","gutter","Col","span","className","disabled","columns","keyColumn","_ref2","loading","field","valueColumn","_ref3","propTypes","EditorPropTypes"],"sources":["../../../../src/visualizations/choropleth/Editor/GeneralSettings.tsx"],"sourcesContent":["import { isString, map, filter, get } from \"lodash\";\nimport React, { useMemo, useCallback } from \"react\";\nimport * as Grid from \"antd/lib/grid\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport { Section, Select } from \"@/components/visualizations/editor\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\n\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\nimport { getGeoJsonFields } from \"./utils\";\n\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\n  const [geoJson, isLoadingGeoJson] = useLoadGeoJson(options.mapType);\n  const geoJsonFields = useMemo(() => getGeoJsonFields(geoJson), [geoJson]);\n\n  // While geoJson is loading - show last selected field in select\n  const targetFields = isLoadingGeoJson ? filter([options.targetField], isString) : geoJsonFields;\n\n  const fieldNames = get(visualizationsSettings, `choroplethAvailableMaps.${options.mapType}.fieldNames`, {});\n\n  const handleMapChange = useCallback(\n    mapType => {\n      onOptionsChange({ mapType: mapType || null });\n    },\n    [onOptionsChange]\n  );\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Map\"\n          data-test=\"Choropleth.Editor.MapType\"\n          defaultValue={options.mapType}\n          onChange={handleMapChange}>\n          {map(visualizationsSettings.choroplethAvailableMaps, (_, mapType) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={mapType} data-test={`Choropleth.Editor.MapType.${mapType}`}>\n              {get(visualizationsSettings, `choroplethAvailableMaps.${mapType}.name`, mapType)}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Grid.Row gutter={15}>\n          <Grid.Col span={12}>\n            <Select\n              label=\"Key Column\"\n              className=\"w-100\"\n              data-test=\"Choropleth.Editor.KeyColumn\"\n              disabled={data.columns.length === 0}\n              defaultValue={options.keyColumn}\n              onChange={(keyColumn: any) => onOptionsChange({ keyColumn })}>\n              {map(data.columns, ({ name }) => (\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n                <Select.Option key={name} data-test={`Choropleth.Editor.KeyColumn.${name}`}>\n                  {name}\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              ))}\n            </Select>\n          </Grid.Col>\n          <Grid.Col span={12}>\n            <Select\n              label=\"Target Field\"\n              className=\"w-100\"\n              data-test=\"Choropleth.Editor.TargetField\"\n              disabled={isLoadingGeoJson || targetFields.length === 0}\n              loading={isLoadingGeoJson}\n              value={options.targetField}\n              onChange={(targetField: any) => onOptionsChange({ targetField })}>\n              {map(targetFields, field => (\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n                <Select.Option key={field} data-test={`Choropleth.Editor.TargetField.${field}`}>\n                  {fieldNames[field] || field}\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              ))}\n            </Select>\n          </Grid.Col>\n        </Grid.Row>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Value Column\"\n          data-test=\"Choropleth.Editor.ValueColumn\"\n          disabled={data.columns.length === 0}\n          defaultValue={options.valueColumn}\n          onChange={(valueColumn: any) => onOptionsChange({ valueColumn })}>\n          {map(data.columns, ({ name }) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={name} data-test={`Choropleth.Editor.ValueColumn.${name}`}>\n              {name}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n    </React.Fragment>\n  );\n}\n\nGeneralSettings.propTypes = EditorPropTypes;\n"],"mappings":"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"}
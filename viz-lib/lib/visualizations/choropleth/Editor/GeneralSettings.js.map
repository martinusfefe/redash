{"version":3,"file":"GeneralSettings.js","names":["isString","map","filter","get","React","useMemo","useCallback","Grid","EditorPropTypes","Section","Select","visualizationsSettings","useLoadGeoJson","getGeoJsonFields","GeneralSettings","_ref","options","data","onOptionsChange","_useLoadGeoJson","mapType","_useLoadGeoJson2","_slicedToArray","geoJson","isLoadingGeoJson","geoJsonFields","targetFields","targetField","fieldNames","concat","handleMapChange","createElement","Fragment","label","defaultValue","onChange","choroplethAvailableMaps","_","Option","key","Row","gutter","Col","span","className","disabled","columns","length","keyColumn","_ref2","name","loading","value","field","valueColumn","_ref3","propTypes"],"sources":["../../../../src/visualizations/choropleth/Editor/GeneralSettings.tsx"],"sourcesContent":["import { isString, map, filter, get } from \"lodash\";\nimport React, { useMemo, useCallback } from \"react\";\nimport * as Grid from \"antd/lib/grid\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport { Section, Select } from \"@/components/visualizations/editor\";\nimport { visualizationsSettings } from \"@/visualizations/visualizationsSettings\";\n\nimport useLoadGeoJson from \"../hooks/useLoadGeoJson\";\nimport { getGeoJsonFields } from \"./utils\";\n\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\n  const [geoJson, isLoadingGeoJson] = useLoadGeoJson(options.mapType);\n  const geoJsonFields = useMemo(() => getGeoJsonFields(geoJson), [geoJson]);\n\n  // While geoJson is loading - show last selected field in select\n  const targetFields = isLoadingGeoJson ? filter([options.targetField], isString) : geoJsonFields;\n\n  const fieldNames = get(visualizationsSettings, `choroplethAvailableMaps.${options.mapType}.fieldNames`, {});\n\n  const handleMapChange = useCallback(\n    mapType => {\n      onOptionsChange({ mapType: mapType || null });\n    },\n    [onOptionsChange]\n  );\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Map\"\n          data-test=\"Choropleth.Editor.MapType\"\n          defaultValue={options.mapType}\n          onChange={handleMapChange}>\n          {map(visualizationsSettings.choroplethAvailableMaps, (_, mapType) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={mapType} data-test={`Choropleth.Editor.MapType.${mapType}`}>\n              {get(visualizationsSettings, `choroplethAvailableMaps.${mapType}.name`, mapType)}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Grid.Row gutter={15}>\n          <Grid.Col span={12}>\n            <Select\n              label=\"Key Column\"\n              className=\"w-100\"\n              data-test=\"Choropleth.Editor.KeyColumn\"\n              disabled={data.columns.length === 0}\n              defaultValue={options.keyColumn}\n              onChange={(keyColumn: any) => onOptionsChange({ keyColumn })}>\n              {map(data.columns, ({ name }) => (\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n                <Select.Option key={name} data-test={`Choropleth.Editor.KeyColumn.${name}`}>\n                  {name}\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              ))}\n            </Select>\n          </Grid.Col>\n          <Grid.Col span={12}>\n            <Select\n              label=\"Target Field\"\n              className=\"w-100\"\n              data-test=\"Choropleth.Editor.TargetField\"\n              disabled={isLoadingGeoJson || targetFields.length === 0}\n              loading={isLoadingGeoJson}\n              value={options.targetField}\n              onChange={(targetField: any) => onOptionsChange({ targetField })}>\n              {map(targetFields, field => (\n                // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n                <Select.Option key={field} data-test={`Choropleth.Editor.TargetField.${field}`}>\n                  {fieldNames[field] || field}\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              ))}\n            </Select>\n          </Grid.Col>\n        </Grid.Row>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Select\n          label=\"Value Column\"\n          data-test=\"Choropleth.Editor.ValueColumn\"\n          disabled={data.columns.length === 0}\n          defaultValue={options.valueColumn}\n          onChange={(valueColumn: any) => onOptionsChange({ valueColumn })}>\n          {map(data.columns, ({ name }) => (\n            // @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message\n            <Select.Option key={name} data-test={`Choropleth.Editor.ValueColumn.${name}`}>\n              {name}\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          ))}\n        </Select>\n      </Section>\n    </React.Fragment>\n  );\n}\n\nGeneralSettings.propTypes = EditorPropTypes;\n"],"mappings":"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"}
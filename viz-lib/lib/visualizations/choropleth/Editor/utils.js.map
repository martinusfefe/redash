{"version":3,"file":"utils.js","names":["_lodash","require","_leaflet","_interopRequireDefault","obj","__esModule","default","getGeoJsonFields","geoJson","features","isObject","isArray","reduce","result","feature","properties","uniq","keys","getGeoJsonBounds","layer","L","geoJSON","bounds","getBounds","isValid","_southWest","lat","lng","_northEast"],"sources":["../../../../src/visualizations/choropleth/Editor/utils.ts"],"sourcesContent":["import { isObject, isArray, reduce, keys, uniq } from \"lodash\";\nimport L from \"leaflet\";\n\nexport function getGeoJsonFields(geoJson: any) {\n  // @ts-expect-error ts-migrate(2339) FIXME: Property 'features' does not exist on type 'object... Remove this comment to see the full error message\n  const features = isObject(geoJson) && isArray(geoJson.features) ? geoJson.features : [];\n  return reduce(\n    features,\n    // @ts-expect-error ts-migrate(2769) FIXME: No overload matches this call.\n    (result, feature) => {\n      // @ts-expect-error ts-migrate(2339) FIXME: Property 'properties' does not exist on type 'obje... Remove this comment to see the full error message\n      const properties = isObject(feature) && isObject(feature.properties) ? feature.properties : {};\n      return uniq([...result, ...keys(properties)]);\n    },\n    []\n  );\n}\n\nexport function getGeoJsonBounds(geoJson: any) {\n  if (isObject(geoJson)) {\n    // @ts-expect-error ts-migrate(2345) FIXME: Argument of type 'object' is not assignable to par... Remove this comment to see the full error message\n    const layer = L.geoJSON(geoJson);\n    const bounds = layer.getBounds();\n    if (bounds.isValid()) {\n      return [\n        // @ts-expect-error ts-migrate(2551) FIXME: Property '_southWest' does not exist on type 'LatL... Remove this comment to see the full error message\n        [bounds._southWest.lat, bounds._southWest.lng],\n        // @ts-expect-error ts-migrate(2551) FIXME: Property '_northEast' does not exist on type 'LatL... Remove this comment to see the full error message\n        [bounds._northEast.lat, bounds._northEast.lng],\n      ];\n    }\n  }\n  return null;\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAwB,SAAAE,uBAAAC,GAAA,WAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA,KAAAE,OAAA,EAAAF,GAAA;AAEjB,SAASG,gBAAgBA,CAACC,OAAY,EAAE;EAC7C;EACA,IAAMC,QAAQ,GAAG,IAAAC,gBAAQ,EAACF,OAAO,CAAC,IAAI,IAAAG,eAAO,EAACH,OAAO,CAACC,QAAQ,CAAC,GAAGD,OAAO,CAACC,QAAQ,GAAG,EAAE;EACvF,OAAO,IAAAG,cAAM,EACXH,QAAQ;EACR;EACA,CAACI,MAAM,EAAEC,OAAO,KAAK;IACnB;IACA,IAAMC,UAAU,GAAG,IAAAL,gBAAQ,EAACI,OAAO,CAAC,IAAI,IAAAJ,gBAAQ,EAACI,OAAO,CAACC,UAAU,CAAC,GAAGD,OAAO,CAACC,UAAU,GAAG,CAAC,CAAC;IAC9F,OAAO,IAAAC,YAAI,EAAC,CAAC,GAAGH,MAAM,EAAE,GAAG,IAAAI,YAAI,EAACF,UAAU,CAAC,CAAC,CAAC;EAC/C,CAAC,EACD,EACF,CAAC;AACH;AAEO,SAASG,gBAAgBA,CAACV,OAAY,EAAE;EAC7C,IAAI,IAAAE,gBAAQ,EAACF,OAAO,CAAC,EAAE;IACrB;IACA,IAAMW,KAAK,GAAGC,gBAAC,CAACC,OAAO,CAACb,OAAO,CAAC;IAChC,IAAMc,MAAM,GAAGH,KAAK,CAACI,SAAS,CAAC,CAAC;IAChC,IAAID,MAAM,CAACE,OAAO,CAAC,CAAC,EAAE;MACpB,OAAO;MACL;MACA,CAACF,MAAM,CAACG,UAAU,CAACC,GAAG,EAAEJ,MAAM,CAACG,UAAU,CAACE,GAAG,CAAC;MAC9C;MACA,CAACL,MAAM,CAACM,UAAU,CAACF,GAAG,EAAEJ,MAAM,CAACM,UAAU,CAACD,GAAG,CAAC,CAC/C;IACH;EACF;EACA,OAAO,IAAI;AACb"}
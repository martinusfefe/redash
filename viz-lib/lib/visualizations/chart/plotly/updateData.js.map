{"version":3,"file":"updateData.js","names":["_lodash","require","_valueFormat","_utils","shouldUseUnifiedXAxis","options","sortX","xAxis","type","globalSeriesType","defaultFormatSeriesText","item","result","undefined","concat","defaultFormatSeriesTextForPie","createTextFormatter","textFormat","formatSimpleTemplate","formatValue","value","axis","axisType","yAxis","normalizeValue","dateTimeFormat","updateSeriesText","seriesList","formatNumber","createNumberFormatter","numberFormat","formatPercent","percentFormat","formatText","defaultY","missingValuesAsZero","each","series","seriesOptions","name","text","hover","xValues","labels","x","forEach","sourceData","get","y","row","yValueIsAny","includes","yaxis","yError","size","percentValues","Math","abs","yPercent","extend","$raw","push","updatePercentValues","sumOfCorrespondingPoints","Map","sum","set","yValues","isNil","getUnifiedXAxisValues","sorted","Set","add","sortBy","identity","updateUnifiedXAxisValues","unifiedX","error_y","array","updatePieData","updateLineAreaData","stacking","cumulativeValues","map","i","stackedY","updateDefaultData","updateData","visibleSeriesList","filter","s","visible","length"],"sources":["../../../../src/visualizations/chart/plotly/updateData.ts"],"sourcesContent":["import { isNil, each, extend, filter, identity, includes, map, sortBy } from \"lodash\";\nimport { createNumberFormatter, formatSimpleTemplate } from \"@/lib/value-format\";\nimport { normalizeValue } from \"./utils\";\n\nfunction shouldUseUnifiedXAxis(options: any) {\n  return options.sortX && options.xAxis.type === \"category\" && options.globalSeriesType !== \"box\";\n}\n\nfunction defaultFormatSeriesText(item: any) {\n  let result = item[\"@@y\"];\n  if (item[\"@@yError\"] !== undefined) {\n    result = `${result} \\u00B1 ${item[\"@@yError\"]}`;\n  }\n  if (item[\"@@yPercent\"] !== undefined) {\n    result = `${item[\"@@yPercent\"]} (${result})`;\n  }\n  if (item[\"@@size\"] !== undefined) {\n    result = `${result}: ${item[\"@@size\"]}`;\n  }\n  return result;\n}\n\nfunction defaultFormatSeriesTextForPie(item: any) {\n  return item[\"@@yPercent\"] + \" (\" + item[\"@@y\"] + \")\";\n}\n\nfunction createTextFormatter(options: any) {\n  if (options.textFormat === \"\") {\n    return options.globalSeriesType === \"pie\" ? defaultFormatSeriesTextForPie : defaultFormatSeriesText;\n  }\n  return (item: any) => formatSimpleTemplate(options.textFormat, item);\n}\n\nfunction formatValue(value: any, axis: any, options: any) {\n  let axisType = null;\n  switch (axis) {\n    case \"x\":\n      axisType = options.xAxis.type;\n      break;\n    case \"y\":\n      axisType = options.yAxis[0].type;\n      break;\n    case \"y2\":\n      axisType = options.yAxis[1].type;\n      break;\n    // no default\n  }\n  return normalizeValue(value, axisType, options.dateTimeFormat);\n}\n\nfunction updateSeriesText(seriesList: any, options: any) {\n  const formatNumber = createNumberFormatter(options.numberFormat);\n  const formatPercent = createNumberFormatter(options.percentFormat);\n  const formatText = createTextFormatter(options);\n\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\n\n  each(seriesList, series => {\n    const seriesOptions = options.seriesOptions[series.name] || { type: options.globalSeriesType };\n\n    series.text = [];\n    series.hover = [];\n    const xValues = options.globalSeriesType === \"pie\" ? series.labels : series.x;\n    xValues.forEach((x: any) => {\n      const text = {\n        \"@@name\": series.name,\n      };\n      const item = series.sourceData.get(x) || { x, y: defaultY, row: { x, y: defaultY } };\n\n      const yValueIsAny = includes([\"bubble\", \"scatter\"], seriesOptions.type);\n\n      // for `formatValue` we have to use original value of `x` and `y`: `item.x`/`item.y` contains value\n      // already processed with `normalizeValue`, and if they were `moment` instances - they are formatted\n      // using default (ISO) date/time format. Here we need to use custom date/time format, so we pass original value\n      // to `formatValue` which will call `normalizeValue` again, but this time with different date/time format\n      // (if needed)\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      text[\"@@x\"] = formatValue(item.row.x, \"x\", options);\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      text[\"@@y\"] = yValueIsAny ? formatValue(item.row.y, series.yaxis, options) : formatNumber(item.y);\n      if (item.yError !== undefined) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@yError\"] = formatNumber(item.yError);\n      }\n      if (item.size !== undefined) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@size\"] = formatNumber(item.size);\n      }\n\n      if (options.series.percentValues || options.globalSeriesType === \"pie\") {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@yPercent\"] = formatPercent(Math.abs(item.yPercent));\n      }\n\n      extend(text, item.row.$raw);\n\n      series.text.push(formatText(text));\n    });\n  });\n}\n\nfunction updatePercentValues(seriesList: any, options: any) {\n  if (options.series.percentValues) {\n    // Some series may not have corresponding x-values;\n    // do calculations for each x only for series that do have that x\n    const sumOfCorrespondingPoints = new Map();\n    each(seriesList, series => {\n      series.sourceData.forEach((item: any) => {\n        const sum = sumOfCorrespondingPoints.get(item.x) || 0;\n        sumOfCorrespondingPoints.set(item.x, sum + Math.abs(item.y || 0.0));\n      });\n    });\n\n    each(seriesList, series => {\n      const yValues: any = [];\n\n      series.sourceData.forEach((item: any) => {\n        if (isNil(item.y) && !options.missingValuesAsZero) {\n          item.yPercent = null;\n        } else {\n          const sum = sumOfCorrespondingPoints.get(item.x);\n          item.yPercent = (item.y / sum) * 100;\n        }\n        yValues.push(item.yPercent);\n      });\n\n      series.y = yValues;\n    });\n  }\n}\n\nfunction getUnifiedXAxisValues(seriesList: any, sorted: any) {\n  const set = new Set();\n  each(seriesList, series => {\n    // `Map.forEach` will walk items in insertion order\n    series.sourceData.forEach((item: any) => {\n      set.add(item.x);\n    });\n  });\n\n  const result = [...set];\n  return sorted ? sortBy(result, identity) : result;\n}\n\nfunction updateUnifiedXAxisValues(seriesList: any, options: any) {\n  const unifiedX = getUnifiedXAxisValues(seriesList, options.sortX);\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\n  each(seriesList, series => {\n    series.x = [];\n    series.y = [];\n    series.error_y.array = [];\n    each(unifiedX, x => {\n      series.x.push(x);\n      const item = series.sourceData.get(x);\n      if (item) {\n        series.y.push(options.series.percentValues ? item.yPercent : item.y);\n        series.error_y.array.push(item.yError);\n      } else {\n        series.y.push(defaultY);\n        series.error_y.array.push(null);\n      }\n    });\n  });\n}\n\nfunction updatePieData(seriesList: any, options: any) {\n  updateSeriesText(seriesList, options);\n}\n\nfunction updateLineAreaData(seriesList: any, options: any) {\n  // Apply \"percent values\" modification\n  updatePercentValues(seriesList, options);\n  if (options.series.stacking) {\n    updateUnifiedXAxisValues(seriesList, options);\n\n    // Calculate cumulative value for each x tick\n    const cumulativeValues = {};\n    each(seriesList, series => {\n      series.y = map(series.y, (y, i) => {\n        if (isNil(y) && !options.missingValuesAsZero) {\n          return null;\n        }\n        const x = series.x[i];\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        const stackedY = y + (cumulativeValues[x] || 0.0);\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        cumulativeValues[x] = stackedY;\n        return stackedY;\n      });\n    });\n  } else {\n    if (shouldUseUnifiedXAxis(options)) {\n      updateUnifiedXAxisValues(seriesList, options);\n    }\n  }\n\n  // Finally - update text labels\n  updateSeriesText(seriesList, options);\n}\n\nfunction updateDefaultData(seriesList: any, options: any) {\n  // Apply \"percent values\" modification\n  updatePercentValues(seriesList, options);\n\n  if (!options.series.stacking) {\n    if (shouldUseUnifiedXAxis(options)) {\n      updateUnifiedXAxisValues(seriesList, options);\n    }\n  }\n\n  // Finally - update text labels\n  updateSeriesText(seriesList, options);\n}\n\nexport default function updateData(seriesList: any, options: any) {\n  // Use only visible series\n  const visibleSeriesList = filter(seriesList, s => s.visible === true);\n\n  if (visibleSeriesList.length > 0) {\n    switch (options.globalSeriesType) {\n      case \"pie\":\n        updatePieData(visibleSeriesList, options);\n        break;\n      case \"line\":\n      case \"area\":\n        updateLineAreaData(visibleSeriesList, options);\n        break;\n      case \"heatmap\":\n        break;\n      default:\n        updateDefaultData(visibleSeriesList, options);\n        break;\n    }\n  }\n  return seriesList;\n}\n"],"mappings":"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"}
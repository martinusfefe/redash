{"version":3,"file":"updateData.js","names":["isNil","each","extend","filter","identity","includes","map","sortBy","createNumberFormatter","formatSimpleTemplate","normalizeValue","shouldUseUnifiedXAxis","options","sortX","xAxis","type","globalSeriesType","defaultFormatSeriesText","item","result","undefined","concat","defaultFormatSeriesTextForPie","createTextFormatter","textFormat","formatValue","value","axis","axisType","yAxis","dateTimeFormat","updateSeriesText","seriesList","formatNumber","numberFormat","formatPercent","percentFormat","formatText","defaultY","missingValuesAsZero","series","seriesOptions","name","text","hover","xValues","labels","x","forEach","sourceData","get","y","row","yValueIsAny","yaxis","yError","size","percentValues","Math","abs","yPercent","$raw","push","updatePercentValues","sumOfCorrespondingPoints","Map","sum","set","yValues","getUnifiedXAxisValues","sorted","Set","add","updateUnifiedXAxisValues","unifiedX","error_y","array","updatePieData","updateLineAreaData","stacking","cumulativeValues","i","stackedY","updateDefaultData","updateData","visibleSeriesList","s","visible","length"],"sources":["../../../../src/visualizations/chart/plotly/updateData.ts"],"sourcesContent":["import { isNil, each, extend, filter, identity, includes, map, sortBy } from \"lodash\";\nimport { createNumberFormatter, formatSimpleTemplate } from \"@/lib/value-format\";\nimport { normalizeValue } from \"./utils\";\n\nfunction shouldUseUnifiedXAxis(options: any) {\n  return options.sortX && options.xAxis.type === \"category\" && options.globalSeriesType !== \"box\";\n}\n\nfunction defaultFormatSeriesText(item: any) {\n  let result = item[\"@@y\"];\n  if (item[\"@@yError\"] !== undefined) {\n    result = `${result} \\u00B1 ${item[\"@@yError\"]}`;\n  }\n  if (item[\"@@yPercent\"] !== undefined) {\n    result = `${item[\"@@yPercent\"]} (${result})`;\n  }\n  if (item[\"@@size\"] !== undefined) {\n    result = `${result}: ${item[\"@@size\"]}`;\n  }\n  return result;\n}\n\nfunction defaultFormatSeriesTextForPie(item: any) {\n  return item[\"@@yPercent\"] + \" (\" + item[\"@@y\"] + \")\";\n}\n\nfunction createTextFormatter(options: any) {\n  if (options.textFormat === \"\") {\n    return options.globalSeriesType === \"pie\" ? defaultFormatSeriesTextForPie : defaultFormatSeriesText;\n  }\n  return (item: any) => formatSimpleTemplate(options.textFormat, item);\n}\n\nfunction formatValue(value: any, axis: any, options: any) {\n  let axisType = null;\n  switch (axis) {\n    case \"x\":\n      axisType = options.xAxis.type;\n      break;\n    case \"y\":\n      axisType = options.yAxis[0].type;\n      break;\n    case \"y2\":\n      axisType = options.yAxis[1].type;\n      break;\n    // no default\n  }\n  return normalizeValue(value, axisType, options.dateTimeFormat);\n}\n\nfunction updateSeriesText(seriesList: any, options: any) {\n  const formatNumber = createNumberFormatter(options.numberFormat);\n  const formatPercent = createNumberFormatter(options.percentFormat);\n  const formatText = createTextFormatter(options);\n\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\n\n  each(seriesList, series => {\n    const seriesOptions = options.seriesOptions[series.name] || { type: options.globalSeriesType };\n\n    series.text = [];\n    series.hover = [];\n    const xValues = options.globalSeriesType === \"pie\" ? series.labels : series.x;\n    xValues.forEach((x: any) => {\n      const text = {\n        \"@@name\": series.name,\n      };\n      const item = series.sourceData.get(x) || { x, y: defaultY, row: { x, y: defaultY } };\n\n      const yValueIsAny = includes([\"bubble\", \"scatter\"], seriesOptions.type);\n\n      // for `formatValue` we have to use original value of `x` and `y`: `item.x`/`item.y` contains value\n      // already processed with `normalizeValue`, and if they were `moment` instances - they are formatted\n      // using default (ISO) date/time format. Here we need to use custom date/time format, so we pass original value\n      // to `formatValue` which will call `normalizeValue` again, but this time with different date/time format\n      // (if needed)\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      text[\"@@x\"] = formatValue(item.row.x, \"x\", options);\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      text[\"@@y\"] = yValueIsAny ? formatValue(item.row.y, series.yaxis, options) : formatNumber(item.y);\n      if (item.yError !== undefined) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@yError\"] = formatNumber(item.yError);\n      }\n      if (item.size !== undefined) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@size\"] = formatNumber(item.size);\n      }\n\n      if (options.series.percentValues || options.globalSeriesType === \"pie\") {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        text[\"@@yPercent\"] = formatPercent(Math.abs(item.yPercent));\n      }\n\n      extend(text, item.row.$raw);\n\n      series.text.push(formatText(text));\n    });\n  });\n}\n\nfunction updatePercentValues(seriesList: any, options: any) {\n  if (options.series.percentValues) {\n    // Some series may not have corresponding x-values;\n    // do calculations for each x only for series that do have that x\n    const sumOfCorrespondingPoints = new Map();\n    each(seriesList, series => {\n      series.sourceData.forEach((item: any) => {\n        const sum = sumOfCorrespondingPoints.get(item.x) || 0;\n        sumOfCorrespondingPoints.set(item.x, sum + Math.abs(item.y || 0.0));\n      });\n    });\n\n    each(seriesList, series => {\n      const yValues: any = [];\n\n      series.sourceData.forEach((item: any) => {\n        if (isNil(item.y) && !options.missingValuesAsZero) {\n          item.yPercent = null;\n        } else {\n          const sum = sumOfCorrespondingPoints.get(item.x);\n          item.yPercent = (item.y / sum) * 100;\n        }\n        yValues.push(item.yPercent);\n      });\n\n      series.y = yValues;\n    });\n  }\n}\n\nfunction getUnifiedXAxisValues(seriesList: any, sorted: any) {\n  const set = new Set();\n  each(seriesList, series => {\n    // `Map.forEach` will walk items in insertion order\n    series.sourceData.forEach((item: any) => {\n      set.add(item.x);\n    });\n  });\n\n  const result = [...set];\n  return sorted ? sortBy(result, identity) : result;\n}\n\nfunction updateUnifiedXAxisValues(seriesList: any, options: any) {\n  const unifiedX = getUnifiedXAxisValues(seriesList, options.sortX);\n  const defaultY = options.missingValuesAsZero ? 0.0 : null;\n  each(seriesList, series => {\n    series.x = [];\n    series.y = [];\n    series.error_y.array = [];\n    each(unifiedX, x => {\n      series.x.push(x);\n      const item = series.sourceData.get(x);\n      if (item) {\n        series.y.push(options.series.percentValues ? item.yPercent : item.y);\n        series.error_y.array.push(item.yError);\n      } else {\n        series.y.push(defaultY);\n        series.error_y.array.push(null);\n      }\n    });\n  });\n}\n\nfunction updatePieData(seriesList: any, options: any) {\n  updateSeriesText(seriesList, options);\n}\n\nfunction updateLineAreaData(seriesList: any, options: any) {\n  // Apply \"percent values\" modification\n  updatePercentValues(seriesList, options);\n  if (options.series.stacking) {\n    updateUnifiedXAxisValues(seriesList, options);\n\n    // Calculate cumulative value for each x tick\n    const cumulativeValues = {};\n    each(seriesList, series => {\n      series.y = map(series.y, (y, i) => {\n        if (isNil(y) && !options.missingValuesAsZero) {\n          return null;\n        }\n        const x = series.x[i];\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        const stackedY = y + (cumulativeValues[x] || 0.0);\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        cumulativeValues[x] = stackedY;\n        return stackedY;\n      });\n    });\n  } else {\n    if (shouldUseUnifiedXAxis(options)) {\n      updateUnifiedXAxisValues(seriesList, options);\n    }\n  }\n\n  // Finally - update text labels\n  updateSeriesText(seriesList, options);\n}\n\nfunction updateDefaultData(seriesList: any, options: any) {\n  // Apply \"percent values\" modification\n  updatePercentValues(seriesList, options);\n\n  if (!options.series.stacking) {\n    if (shouldUseUnifiedXAxis(options)) {\n      updateUnifiedXAxisValues(seriesList, options);\n    }\n  }\n\n  // Finally - update text labels\n  updateSeriesText(seriesList, options);\n}\n\nexport default function updateData(seriesList: any, options: any) {\n  // Use only visible series\n  const visibleSeriesList = filter(seriesList, s => s.visible === true);\n\n  if (visibleSeriesList.length > 0) {\n    switch (options.globalSeriesType) {\n      case \"pie\":\n        updatePieData(visibleSeriesList, options);\n        break;\n      case \"line\":\n      case \"area\":\n        updateLineAreaData(visibleSeriesList, options);\n        break;\n      case \"heatmap\":\n        break;\n      default:\n        updateDefaultData(visibleSeriesList, options);\n        break;\n    }\n  }\n  return seriesList;\n}\n"],"mappings":"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"}
{"version":3,"file":"updateAxes.js","names":["isObject","isNumber","each","calculateAxisRange","range","min","max","calculateAbsoluteDiff","value","totalRange","percentageDiff","Math","abs","alignYAxesAtZero","axisA","axisB","totalRangeA","proportionA","totalRangeB","proportionB","diff","updateAxes","plotlyElement","seriesList","layout","options","updates","yaxis","_objectSpread","autorange","yaxis2","axisOptions","yAxis","defaultRange","rangeMin","rangeMax","swappedAxes","series","orientation","x","y","xaxis"],"sources":["../../../../src/visualizations/chart/plotly/updateAxes.ts"],"sourcesContent":["import { isObject, isNumber, each } from \"lodash\";\n\nfunction calculateAxisRange(range: any, min: any, max: any) {\n  return [isNumber(min) ? min : range[0], isNumber(max) ? max : range[1]];\n}\n\nfunction calculateAbsoluteDiff(value: any, totalRange: any, percentageDiff: any) {\n  return (percentageDiff * totalRange) / (1 - Math.abs(value) / totalRange - percentageDiff);\n}\n\nfunction alignYAxesAtZero(axisA: any, axisB: any) {\n  // Make sure the origin is included in both axes\n  axisA.range[1] = Math.max(0, axisA.range[1]);\n  axisB.range[1] = Math.max(0, axisB.range[1]);\n  axisA.range[0] = Math.min(0, axisA.range[0]);\n  axisB.range[0] = Math.min(0, axisB.range[0]);\n\n  const totalRangeA = axisA.range[1] - axisA.range[0];\n  const proportionA = axisA.range[1] / totalRangeA;\n  const totalRangeB = axisB.range[1] - axisB.range[0];\n  const proportionB = axisB.range[1] / totalRangeB;\n\n  // Calculate the difference between the proportions and distribute them within the two axes\n  const diff = Math.abs(proportionB - proportionA) / 2;\n\n  // Don't do anything if the difference is too low\n  if (diff < 0.01) {\n    return;\n  }\n\n  // Select the two that will correct the proportion by always augmenting, so the chart is not cut\n  if (proportionA < proportionB) {\n    // increase axisA max and axisB min\n    axisA.range[1] += calculateAbsoluteDiff(axisA.range[1], totalRangeA, diff);\n    axisB.range[0] -= calculateAbsoluteDiff(axisA.range[0], totalRangeB, diff);\n  } else {\n    // increase axisB max and axisA min\n    axisB.range[1] += calculateAbsoluteDiff(axisB.range[1], totalRangeB, diff);\n    axisA.range[0] -= calculateAbsoluteDiff(axisA.range[0], totalRangeA, diff);\n  }\n}\n\nexport default function updateAxes(plotlyElement: any, seriesList: any, layout: any, options: any) {\n  const updates = {};\n  if (isObject(layout.yaxis)) {\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n    updates.yaxis = {\n      ...layout.yaxis,\n      autorange: true,\n      range: null,\n    };\n  }\n  if (isObject(layout.yaxis2)) {\n    // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\n    updates.yaxis2 = {\n      ...layout.yaxis2,\n      autorange: true,\n      range: null,\n    };\n  }\n\n  return [\n    updates,\n    () => {\n      // Update Y Ranges\n      if (isObject(layout.yaxis)) {\n        const axisOptions = options.yAxis[0];\n        const defaultRange = plotlyElement.layout.yaxis.range;\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n        updates.yaxis.autorange = false;\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n        updates.yaxis.range = calculateAxisRange(defaultRange, axisOptions.rangeMin, axisOptions.rangeMax);\n      }\n\n      if (isObject(layout.yaxis2)) {\n        const axisOptions = options.yAxis[1];\n        const defaultRange = plotlyElement.layout.yaxis2.range;\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\n        updates.yaxis2.autorange = false;\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\n        updates.yaxis2.range = calculateAxisRange(defaultRange, axisOptions.rangeMin, axisOptions.rangeMax);\n      }\n\n      // Swap Axes\n      if (options.swappedAxes) {\n        each(seriesList, series => {\n          series.orientation = \"h\";\n          const { x, y } = series;\n          series.x = y;\n          series.y = x;\n        });\n\n        const { xaxis } = layout;\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n        const { yaxis, yaxis2 } = updates;\n\n        if (isObject(xaxis) && isObject(yaxis)) {\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'xaxis' does not exist on type '{}'.\n          updates.xaxis = yaxis;\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n          updates.yaxis = xaxis;\n        }\n        if (isObject(yaxis2)) {\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis2' does not exist on type '{}'.\n          updates.yaxis2 = null;\n        }\n      }\n\n      // Align Y axes\n      if (options.alignYAxesAtZero && isObject(layout.yaxis) && isObject(layout.yaxis2)) {\n        // @ts-expect-error ts-migrate(2339) FIXME: Property 'yaxis' does not exist on type '{}'.\n        alignYAxesAtZero(updates.yaxis, updates.yaxis2);\n      }\n\n      return [updates, null]; // no further updates\n    },\n  ];\n}\n"],"mappings":"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"}
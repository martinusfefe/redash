{"version":3,"file":"prepareDefaultData.js","names":["_lodash","require","_chooseTextColorForBackground","_interopRequireDefault","_ColorPalette","_utils","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","getSeriesColor","options","seriesOptions","seriesIndex","numSeries","palette","AllColorPaletteArrays","color_scheme","ColorPaletteTypes","step","index","Math","round","color","getHoverInfoPattern","hasX","test","textFormat","hasName","result","prepareBarSeries","series","additionalOptions","type","offsetgroup","toString","showDataLabels","textposition","prepareLineSeries","mode","prepareAreaSeries","fill","stacking","prepareScatterSeries","prepareBubbleSeries","_ref","seriesColor","data","coefficient","marker","size","map","sizemode","prepareBoxSeries","_ref2","boxpoints","hoverinfo","showpoints","jitter","pointpos","prepareSeries","_additionalOptions","hoverInfoPattern","extend","globalSeriesType","yAxis","name","seriesYAxis","getSeriesAxis","sortX","sortBy","d","normalizeValue","x","xAxis","cleanYValue","includes","v","cleanNumber","missingValuesAsZero","isNil","sourceData","Map","xValues","yValues","yErrorValues","each","row","y","yError","set","yPercent","plotlySeries","visible","error_y","array","insidetextfont","chooseTextColorForBackground","yaxis","prepareDefaultData","seriesList"],"sources":["../../../../src/visualizations/chart/plotly/prepareDefaultData.ts"],"sourcesContent":["import { isNil, extend, each, includes, map, sortBy, toString } from \"lodash\";\nimport chooseTextColorForBackground from \"@/lib/chooseTextColorForBackground\";\nimport { AllColorPaletteArrays, ColorPaletteTypes } from \"@/visualizations/ColorPalette\";\nimport { cleanNumber, normalizeValue, getSeriesAxis } from \"./utils\";\n\nfunction getSeriesColor(options: any, seriesOptions: any, seriesIndex: any, numSeries: any) {\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n  let palette = AllColorPaletteArrays[options.color_scheme];\n  // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n  if (ColorPaletteTypes[options.color_scheme] === 'continuous' && palette.length > numSeries) {\n    const step = (palette.length - 1) / (numSeries - 1 || 1);\n    const index = Math.round(step * seriesIndex);\n    return seriesOptions.color || palette[index % palette.length];\n  }\n  return seriesOptions.color || palette[seriesIndex % palette.length];\n}\n\nfunction getHoverInfoPattern(options: any) {\n  const hasX = /{{\\s*@@x\\s*}}/.test(options.textFormat);\n  const hasName = /{{\\s*@@name\\s*}}/.test(options.textFormat);\n  let result = \"text\";\n  if (!hasX) result += \"+x\";\n  if (!hasName) result += \"+name\";\n  return result;\n}\n\nfunction prepareBarSeries(series: any, options: any, additionalOptions: any) {\n  series.type = \"bar\";\n  series.offsetgroup = toString(additionalOptions.index);\n  if (options.showDataLabels) {\n    series.textposition = \"inside\";\n  } else {\n    series.textposition = \"none\";\n  }\n  return series;\n}\n\nfunction prepareLineSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareAreaSeries(series: any, options: any) {\n  series.mode = \"lines\" + (options.showDataLabels ? \"+text\" : \"\");\n  series.fill = options.series.stacking ? \"tonexty\" : \"tozeroy\";\n  return series;\n}\n\nfunction prepareScatterSeries(series: any, options: any) {\n  series.type = \"scatter\";\n  series.mode = \"markers\" + (options.showDataLabels ? \"+text\" : \"\");\n  return series;\n}\n\nfunction prepareBubbleSeries(series: any, options: any, { seriesColor, data }: any) {\n  const coefficient = options.coefficient || 1;\n  series.mode = \"markers\";\n  series.marker = {\n    color: seriesColor,\n    size: map(data, i => i.size * coefficient),\n    sizemode: options.sizemode || \"diameter\",\n  };\n  return series;\n}\n\nfunction prepareBoxSeries(series: any, options: any, { seriesColor }: any) {\n  series.type = \"box\";\n  series.mode = \"markers\";\n\n  series.boxpoints = \"outliers\";\n  series.hoverinfo = false;\n  series.marker = {\n    color: seriesColor,\n    size: 3,\n  };\n  if (options.showpoints) {\n    series.boxpoints = \"all\";\n    series.jitter = 0.3;\n    series.pointpos = -1.8;\n  }\n  return series;\n}\n\nfunction prepareSeries(series: any, options: any, numSeries: any, additionalOptions: any) {\n  const { hoverInfoPattern, index } = additionalOptions;\n\n  const seriesOptions = extend({ type: options.globalSeriesType, yAxis: 0 }, options.seriesOptions[series.name]);\n  const seriesColor = getSeriesColor(options, seriesOptions, index, numSeries);\n  const seriesYAxis = getSeriesAxis(series, options);\n\n  // Sort by x - `Map` preserves order of items\n  const data = options.sortX ? sortBy(series.data, d => normalizeValue(d.x, options.xAxis.type)) : series.data;\n\n  // For bubble/scatter charts `y` may be any (similar to `x`) - numeric is only bubble size;\n  // for other types `y` is always number\n  const cleanYValue = includes([\"bubble\", \"scatter\"], seriesOptions.type)\n    ? normalizeValue\n    : (v: any) => {\n        v = cleanNumber(v);\n        return options.missingValuesAsZero && isNil(v) ? 0.0 : v;\n      };\n\n  const sourceData = new Map();\n  const xValues: any[] = [];\n  const yValues: any[] = [];\n\n  const yErrorValues: any = [];\n  each(data, row => {\n    const x = normalizeValue(row.x, options.xAxis.type); // number/datetime/category\n    const y = cleanYValue(row.y, seriesYAxis === \"y2\" ? options.yAxis[1].type : options.yAxis[0].type); // depends on series type!\n    const yError = cleanNumber(row.yError); // always number\n    const size = cleanNumber(row.size); // always number\n\n    sourceData.set(x, {\n      x,\n      y,\n      yError,\n      size,\n      yPercent: null, // will be updated later\n      row,\n    });\n    xValues.push(x);\n    yValues.push(y);\n    yErrorValues.push(yError);\n  });\n\n  const plotlySeries = {\n    visible: true,\n    hoverinfo: hoverInfoPattern,\n    x: xValues,\n    y: yValues,\n    error_y: {\n      array: yErrorValues,\n      color: seriesColor,\n    },\n    name: seriesOptions.name || series.name,\n    marker: { color: seriesColor },\n    insidetextfont: {\n      color: chooseTextColorForBackground(seriesColor),\n    },\n    yaxis: seriesYAxis,\n    sourceData,\n  };\n\n  additionalOptions = { ...additionalOptions, seriesColor, data };\n\n  switch (seriesOptions.type) {\n    case \"column\":\n      return prepareBarSeries(plotlySeries, options, additionalOptions);\n    case \"line\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareLineSeries(plotlySeries, options, additionalOptions);\n    case \"area\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareAreaSeries(plotlySeries, options, additionalOptions);\n    case \"scatter\":\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2 arguments, but got 3.\n      return prepareScatterSeries(plotlySeries, options, additionalOptions);\n    case \"bubble\":\n      return prepareBubbleSeries(plotlySeries, options, additionalOptions);\n    case \"box\":\n      return prepareBoxSeries(plotlySeries, options, additionalOptions);\n    default:\n      return plotlySeries;\n  }\n}\n\nexport default function prepareDefaultData(seriesList: any, options: any) {\n  const additionalOptions = {\n    hoverInfoPattern: getHoverInfoPattern(options),\n  };\n  const numSeries = seriesList.length\n\n  return map(seriesList, (series, index) => prepareSeries(series, options, numSeries, { ...additionalOptions, index }));\n}\n"],"mappings":"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"}
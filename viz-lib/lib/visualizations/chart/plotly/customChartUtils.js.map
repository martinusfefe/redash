{"version":3,"file":"customChartUtils.js","names":["each","normalizeValue","prepareCustomChartData","series","x","ys","_ref","name","data","point","push","y","createCustomChartRenderer","code","logErrorsToConsole","arguments","length","undefined","render","Function","err","console","log","concat","element","Plotly"],"sources":["../../../../src/visualizations/chart/plotly/customChartUtils.ts"],"sourcesContent":["import { each } from \"lodash\";\nimport { normalizeValue } from \"./utils\";\n\nexport function prepareCustomChartData(series: any) {\n  const x: any = [];\n  const ys = {};\n\n  each(series, ({ name, data }) => {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    ys[name] = [];\n    each(data, point => {\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 2-3 arguments, but got 1.\n      x.push(normalizeValue(point.x));\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      ys[name].push(normalizeValue(point.y));\n    });\n  });\n\n  return { x, ys };\n}\n\nexport function createCustomChartRenderer(code: any, logErrorsToConsole = false) {\n  // Create a function from custom code; catch syntax errors\n  let render = () => {};\n  try {\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'Function' is not assignable to type '() => v... Remove this comment to see the full error message\n    render = new Function(\"x, ys, element, Plotly\", code); // eslint-disable-line no-new-func\n  } catch (err) {\n    if (logErrorsToConsole) {\n      console.log(`Error while executing custom graph: ${err}`); // eslint-disable-line no-console\n    }\n  }\n\n  // Return function that will invoke custom code; catch runtime errors\n  return (x: any, ys: any, element: any, Plotly: any) => {\n    try {\n      // @ts-expect-error ts-migrate(2554) FIXME: Expected 0 arguments, but got 4.\n      render(x, ys, element, Plotly);\n    } catch (err) {\n      if (logErrorsToConsole) {\n        console.log(`Error while executing custom graph: ${err}`); // eslint-disable-line no-console\n      }\n    }\n  };\n}\n"],"mappings":"AAAA,SAASA,IAAI,QAAQ,QAAQ;AAC7B,SAASC,cAAc;AAEvB,OAAO,SAASC,sBAAsBA,CAACC,MAAW,EAAE;EAClD,IAAMC,CAAM,GAAG,EAAE;EACjB,IAAMC,EAAE,GAAG,CAAC,CAAC;EAEbL,IAAI,CAACG,MAAM,EAAEG,IAAA,IAAoB;IAAA,IAAjBC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IACxB;IACAH,EAAE,CAACE,IAAI,CAAC,GAAG,EAAE;IACbP,IAAI,CAACQ,IAAI,EAAEC,KAAK,IAAI;MAClB;MACAL,CAAC,CAACM,IAAI,CAACT,cAAc,CAACQ,KAAK,CAACL,CAAC,CAAC,CAAC;MAC/B;MACAC,EAAE,CAACE,IAAI,CAAC,CAACG,IAAI,CAACT,cAAc,CAACQ,KAAK,CAACE,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IAAEP,CAAC;IAAEC;EAAG,CAAC;AAClB;AAEA,OAAO,SAASO,yBAAyBA,CAACC,IAAS,EAA8B;EAAA,IAA5BC,kBAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC7E;EACA,IAAIG,MAAM,GAAGA,CAAA,KAAM,CAAC,CAAC;EACrB,IAAI;IACF;IACAA,MAAM,GAAG,IAAIC,QAAQ,CAAC,wBAAwB,EAAEN,IAAI,CAAC,CAAC,CAAC;EACzD,CAAC,CAAC,OAAOO,GAAG,EAAE;IACZ,IAAIN,kBAAkB,EAAE;MACtBO,OAAO,CAACC,GAAG,wCAAAC,MAAA,CAAwCH,GAAG,CAAE,CAAC,CAAC,CAAC;IAC7D;EACF;;EAEA;EACA,OAAO,CAAChB,CAAM,EAAEC,EAAO,EAAEmB,OAAY,EAAEC,MAAW,KAAK;IACrD,IAAI;MACF;MACAP,MAAM,CAACd,CAAC,EAAEC,EAAE,EAAEmB,OAAO,EAAEC,MAAM,CAAC;IAChC,CAAC,CAAC,OAAOL,GAAG,EAAE;MACZ,IAAIN,kBAAkB,EAAE;QACtBO,OAAO,CAACC,GAAG,wCAAAC,MAAA,CAAwCH,GAAG,CAAE,CAAC,CAAC,CAAC;MAC7D;IACF;EACF,CAAC;AACH"}
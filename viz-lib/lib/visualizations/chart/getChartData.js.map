{"version":3,"file":"getChartData.js","names":["_lodash","require","addPointToSeries","point","seriesCollection","seriesName","undefined","name","type","data","push","getChartData","options","series","mappings","columnMapping","each","row","$raw","xValue","yValues","eValue","sizeValue","zValue","forOwn","value","definition","definitionParts","split","String","isNil","yValue","ySeriesName","x","y","yError","size","zVal","sortBy","values","_ref","isObject","seriesOptions","zIndex"],"sources":["../../../src/visualizations/chart/getChartData.ts"],"sourcesContent":["import { isNil, isObject, each, forOwn, sortBy, values } from \"lodash\";\n\nfunction addPointToSeries(point: any, seriesCollection: any, seriesName: any) {\n  if (seriesCollection[seriesName] === undefined) {\n    seriesCollection[seriesName] = {\n      name: seriesName,\n      type: \"column\",\n      data: [],\n    };\n  }\n\n  seriesCollection[seriesName].data.push(point);\n}\n\nexport default function getChartData(data: any, options: any) {\n  const series = {};\n\n  const mappings = options.columnMapping;\n\n  each(data, row => {\n    let point = { $raw: row };\n    let seriesName = null;\n    let xValue = 0;\n    const yValues = {};\n    let eValue: any = null;\n    let sizeValue: any = null;\n    let zValue: any = null;\n\n    forOwn(row, (value, definition) => {\n      definition = \"\" + definition;\n      const definitionParts = definition.split(\"::\") || definition.split(\"__\");\n      const name = definitionParts[0];\n      const type = mappings ? mappings[definition] : definitionParts[1];\n\n      if (type === \"unused\") {\n        return;\n      }\n\n      if (type === \"x\") {\n        xValue = value;\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        point[type] = value;\n      }\n      if (type === \"y\") {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        yValues[name] = value;\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        point[type] = value;\n      }\n      if (type === \"yError\") {\n        eValue = value;\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        point[type] = value;\n      }\n\n      if (type === \"series\") {\n        seriesName = String(value);\n      }\n\n      if (type === \"size\") {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        point[type] = value;\n        sizeValue = value;\n      }\n\n      if (type === \"zVal\") {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        point[type] = value;\n        zValue = value;\n      }\n\n      if (type === \"multiFilter\" || type === \"multi-filter\") {\n        seriesName = String(value);\n      }\n    });\n\n    if (isNil(seriesName)) {\n      each(yValues, (yValue, ySeriesName) => {\n        // @ts-expect-error ts-migrate(2322) FIXME: Type '{ x: number; y: never; $raw: any; }' is not ... Remove this comment to see the full error message\n        point = { x: xValue, y: yValue, $raw: point.$raw };\n        if (eValue !== null) {\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'yError' does not exist on type '{ $raw: ... Remove this comment to see the full error message\n          point.yError = eValue;\n        }\n\n        if (sizeValue !== null) {\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'size' does not exist on type '{ $raw: an... Remove this comment to see the full error message\n          point.size = sizeValue;\n        }\n\n        if (zValue !== null) {\n          // @ts-expect-error ts-migrate(2339) FIXME: Property 'zVal' does not exist on type '{ $raw: an... Remove this comment to see the full error message\n          point.zVal = zValue;\n        }\n        addPointToSeries(point, series, ySeriesName);\n      });\n    } else {\n      addPointToSeries(point, series, seriesName);\n    }\n  });\n  return sortBy(values(series), ({ name }) => {\n    if (isObject(options.seriesOptions[name])) {\n      return options.seriesOptions[name].zIndex || 0;\n    }\n    return 0;\n  });\n}\n"],"mappings":"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"}
{"version":3,"file":"GeneralSettings.js","names":["_lodash","require","_react","_interopRequireWildcard","_editor","_createTabbedEditor","_propTypes","_ChartTypeSelect","_interopRequireDefault","_ColumnMappingSelect","_lib","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","err","return","isArray","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","apply","_objectSpread","target","arguments","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","getAvailableColumnMappingTypes","options","result","includes","globalSeriesType","some","seriesOptions","type","getMappedColumns","availableColumns","mappedColumns","availableTypes","each","ColumnMappingSelect","MappingTypes","multiple","map","c","usedColumns","columnMapping","column","unusedColumns","difference","mappedColumnsToColumnMappings","v","GeneralSettings","_ref","data","onOptionsChange","_useMemo","useMemo","columns","handleGlobalSeriesTypeChange","showDataLabels","swappedAxes","mapValues","series","handleColumnMappingChange","UpdateOptionsStrategy","shallowMerge","handleLegendPlacementChange","legend","enabled","placement","handleAxesSwapping","yAxis","_useDebouncedCallback","useDebouncedCallback","_useDebouncedCallback2","debouncedOnOptionsChange","createElement","Fragment","Section","label","defaultValue","onChange","Checkbox","defaultChecked","checked","areAxesSwapped","InputNumber","coefficient","toNumber","Select","sizemode","mode","Option","direction","piesort","val","traceorder","showpoints","event","stacking","disabled","percentValues","missingValuesAsZero","enableLink","linkOpenNewTab","Input","ContextHelp","arrowPointAtCenter","icon","defaultIcon","placeholder","linkFormat","e","propTypes","EditorPropTypes"],"sources":["../../../../src/visualizations/chart/Editor/GeneralSettings.tsx"],"sourcesContent":["import { isArray, map, mapValues, includes, some, each, difference, toNumber } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport { Section, Select, Checkbox, InputNumber, ContextHelp, Input } from \"@/components/visualizations/editor\";\nimport { UpdateOptionsStrategy } from \"@/components/visualizations/editor/createTabbedEditor\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport { AllColorPalettes } from \"@/visualizations/ColorPalette\";\nimport ChartTypeSelect from \"./ChartTypeSelect\";\nimport ColumnMappingSelect from \"./ColumnMappingSelect\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\n\nfunction getAvailableColumnMappingTypes(options: any) {\n  const result = [\"x\", \"y\"];\n\n  if (!includes([\"custom\", \"heatmap\"], options.globalSeriesType)) {\n    result.push(\"series\");\n  }\n\n  if (options.globalSeriesType === \"bubble\" || some(options.seriesOptions, { type: \"bubble\" })) {\n    result.push(\"size\");\n  }\n\n  if (options.globalSeriesType === \"heatmap\") {\n    result.push(\"zVal\");\n  }\n\n  if (!includes([\"custom\", \"bubble\", \"heatmap\"], options.globalSeriesType)) {\n    result.push(\"yError\");\n  }\n\n  return result;\n}\n\nfunction getMappedColumns(options: any, availableColumns: any) {\n  const mappedColumns = {};\n  const availableTypes = getAvailableColumnMappingTypes(options);\n  each(availableTypes, type => {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    mappedColumns[type] = ColumnMappingSelect.MappingTypes[type].multiple ? [] : null;\n  });\n\n  availableColumns = map(availableColumns, c => c.name);\n  const usedColumns: any = [];\n\n  each(options.columnMapping, (type, column) => {\n    if (includes(availableColumns, column) && includes(availableTypes, type)) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const { multiple } = ColumnMappingSelect.MappingTypes[type];\n      if (multiple) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        mappedColumns[type].push(column);\n      } else {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        mappedColumns[type] = column;\n      }\n      usedColumns.push(column);\n    }\n  });\n\n  return {\n    mappedColumns,\n    unusedColumns: difference(availableColumns, usedColumns),\n  };\n}\n\nfunction mappedColumnsToColumnMappings(mappedColumns: any) {\n  const result = {};\n  each(mappedColumns, (value, type) => {\n    if (isArray(value)) {\n      each(value, v => {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        result[v] = type;\n      });\n    } else {\n      if (value) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        result[value] = type;\n      }\n    }\n  });\n  return result;\n}\n\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\n  const { mappedColumns, unusedColumns } = useMemo(() => getMappedColumns(options, data.columns), [\n    options,\n    data.columns,\n  ]);\n\n  function handleGlobalSeriesTypeChange(globalSeriesType: any) {\n    onOptionsChange({\n      globalSeriesType,\n      showDataLabels: globalSeriesType === \"pie\",\n      swappedAxes: false,\n      seriesOptions: mapValues(options.seriesOptions, series => ({\n        ...series,\n        type: globalSeriesType,\n      })),\n    });\n  }\n\n  function handleColumnMappingChange(column: any, type: any) {\n    const columnMapping = mappedColumnsToColumnMappings({\n      ...mappedColumns,\n      [type]: column,\n    });\n    onOptionsChange({ columnMapping }, UpdateOptionsStrategy.shallowMerge);\n  }\n\n  function handleLegendPlacementChange(value: any) {\n    if (value === \"hidden\") {\n      onOptionsChange({ legend: { enabled: false } });\n    } else {\n      onOptionsChange({ legend: { enabled: true, placement: value } });\n    }\n  }\n\n  function handleAxesSwapping() {\n    // moves any item in the right Y axis to the left one\n    const seriesOptions = mapValues(options.seriesOptions, series => ({\n      ...series,\n      yAxis: 0,\n    }));\n    onOptionsChange({ swappedAxes: !options.swappedAxes, seriesOptions });\n  }\n\n  const [debouncedOnOptionsChange] = useDebouncedCallback(onOptionsChange, 200);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <ChartTypeSelect\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; \"data-test\": string; defaul... Remove this comment to see the full error message\n          label=\"Chart Type\"\n          data-test=\"Chart.GlobalSeriesType\"\n          defaultValue={options.globalSeriesType}\n          onChange={handleGlobalSeriesTypeChange}\n        />\n      </Section>\n\n      {includes([\"column\", \"line\", \"box\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.SwappedAxes\"\n            defaultChecked={options.swappedAxes}\n            checked={options.swappedAxes}\n            onChange={handleAxesSwapping}>\n            Horizontal Chart\n          </Checkbox>\n        </Section>\n      )}\n\n      {map(mappedColumns, (value, type) => (\n        <ColumnMappingSelect\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          key={type}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          type={type}\n          value={value}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n          areAxesSwapped={options.swappedAxes}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'unknown[]' is not assignable to type 'never'... Remove this comment to see the full error message\n          availableColumns={unusedColumns}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '(column: any, type: any) => void' is not ass... Remove this comment to see the full error message\n          onChange={handleColumnMappingChange}\n        />\n      ))}\n\n      {includes([\"bubble\"], options.globalSeriesType) && (\n        <React.Fragment>\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <InputNumber\n              label=\"Bubble Size Coefficient\"\n              data-test=\"Chart.BubbleCoefficient\"\n              defaultValue={options.coefficient}\n              onChange={(value: any) => onOptionsChange({ coefficient: toNumber(value) })}\n            />\n          </Section>\n\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <Select\n              label=\"Bubble Size Proportional To\"\n              data-test=\"Chart.SizeMode\"\n              defaultValue={options.sizemode}\n              onChange={(mode: any) => onOptionsChange({ sizemode: mode })}>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"area\" data-test=\"Chart.SizeMode.Area\">\n                Area\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"diameter\" data-test=\"Chart.SizeMode.Diameter\">\n                Diameter\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n            </Select>\n          </Section>\n        </React.Fragment>\n      )}\n\n      {includes([\"pie\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Direction\"\n            data-test=\"Chart.PieDirection\"\n            defaultValue={options.direction.type}\n            onChange={(type: any) => onOptionsChange({ direction: { type } })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"counterclockwise\" data-test=\"Chart.PieDirection.Counterclockwise\">\n              Counterclockwise\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"clockwise\" data-test=\"Chart.PieDirection.Clockwise\">\n              Clockwise\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n          <Select\n            label=\"Sort\"\n            defaultValue={options.piesort}\n            onChange={(val: any) => onOptionsChange({ piesort: val })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={true}>\n              True\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={false}>\n              False\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\n        <React.Fragment>\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <Select\n              label=\"Legend Placement\"\n              data-test=\"Chart.LegendPlacement\"\n              value={options.legend.enabled ? options.legend.placement : \"hidden\"}\n              onChange={handleLegendPlacementChange}>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"hidden\" data-test=\"Chart.LegendPlacement.HideLegend\">\n                Hide legend\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"auto\" data-test=\"Chart.LegendPlacement.Auto\">\n                Right\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"below\" data-test=\"Chart.LegendPlacement.Below\">\n                Bottom\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n            </Select>\n          </Section>\n\n          {options.legend.enabled && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <Select\n                label=\"Legend Items Order\"\n                data-test=\"Chart.LegendItemsOrder\"\n                value={options.legend.traceorder}\n                onChange={(traceorder: any) => onOptionsChange({ legend: { traceorder } })}>\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                <Select.Option value=\"normal\" data-test=\"Chart.LegendItemsOrder.Normal\">\n                  Normal\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                <Select.Option value=\"reversed\" data-test=\"Chart.LegendItemsOrder.Reversed\">\n                  Reversed\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              </Select>\n            </Section>\n          )}\n        </React.Fragment>\n      )}\n\n      {includes([\"box\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.ShowPoints\"\n            defaultChecked={options.showpoints}\n            onChange={event => onOptionsChange({ showpoints: event.target.checked })}>\n            Show All Points\n          </Checkbox>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Stacking\"\n            data-test=\"Chart.Stacking\"\n            defaultValue={options.series.stacking}\n            disabled={!includes([\"line\", \"area\", \"column\"], options.globalSeriesType)}\n            onChange={(stacking: any) => onOptionsChange({ series: { stacking } })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={null} data-test=\"Chart.Stacking.Disabled\">\n              Disabled\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"stack\" data-test=\"Chart.Stacking.Stack\">\n              Stack\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {includes([\"line\", \"area\", \"column\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.NormalizeValues\"\n            defaultChecked={options.series.percentValues}\n            onChange={event => onOptionsChange({ series: { percentValues: event.target.checked } })}>\n            Normalize values to percentage\n          </Checkbox>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\", \"bubble\", \"scatter\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Missing and NULL values\"\n            data-test=\"Chart.MissingValues\"\n            defaultValue={options.missingValuesAsZero ? 1 : 0}\n            onChange={(value: any) => onOptionsChange({ missingValuesAsZero: !!value })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={0} data-test=\"Chart.MissingValues.Keep\">\n              Do not display in chart\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={1} data-test=\"Chart.MissingValues.Zero\">\n              Convert to 0 and display in chart\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Chart.EnableClickEvents\"\n          defaultChecked={options.enableLink}\n          onChange={event => onOptionsChange({ enableLink: event.target.checked })}>\n          Enable click events\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Chart.EnableClickEvents.NewTab\"\n          defaultChecked={options.linkOpenNewTab}\n          onChange={event => onOptionsChange({ linkOpenNewTab: event.target.checked })}\n          disabled={!(options.enableLink === true)}\n        >\n          Open in new tab\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label={\n            <React.Fragment>\n              URL template\n              {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\n              <ContextHelp\n                placement=\"topLeft\"\n                arrowPointAtCenter\n                // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message\n                icon={ContextHelp.defaultIcon}>\n                <div>\n                  Every curve can be referenced using <code>{\"{{ @@x1 }} {{ @@y1 }} {{ @@x2 }} {{ @@y2 }} ...\"}</code> syntax:<br/>\n                  axis with any curve number according to the Series config.\n                </div>\n                <div>\n                  The first met curve X and Y values can be referenced by just<code>{\"{{ @@x }} {{ @@y }}\"}</code> syntax.\n                </div>\n                <div>\n                  Any unresolved reference would be replaced with an empty string.\n                </div>\n              </ContextHelp>\n            </React.Fragment>\n          }\n          data-test=\"Chart.DataLabels.TextFormat\"\n          placeholder=\"(nothing)\"\n          defaultValue={options.linkFormat}\n          onChange={(e: any) => debouncedOnOptionsChange({ linkFormat: e.target.value })}\n          disabled={!(options.enableLink === true)}\n        />\n      </Section>\n    </React.Fragment>\n  );\n}\n\nGeneralSettings.propTypes = EditorPropTypes;\n"],"mappings":"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"}
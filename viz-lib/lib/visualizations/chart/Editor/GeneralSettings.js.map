{"version":3,"file":"GeneralSettings.js","names":["isArray","map","mapValues","includes","some","each","difference","toNumber","React","useMemo","Section","Select","Checkbox","InputNumber","ContextHelp","Input","UpdateOptionsStrategy","EditorPropTypes","ChartTypeSelect","ColumnMappingSelect","useDebouncedCallback","getAvailableColumnMappingTypes","options","result","globalSeriesType","push","seriesOptions","type","getMappedColumns","availableColumns","mappedColumns","availableTypes","MappingTypes","multiple","c","name","usedColumns","columnMapping","column","unusedColumns","mappedColumnsToColumnMappings","value","v","GeneralSettings","_ref","data","onOptionsChange","_useMemo","columns","handleGlobalSeriesTypeChange","showDataLabels","swappedAxes","series","_objectSpread","handleColumnMappingChange","shallowMerge","handleLegendPlacementChange","legend","enabled","placement","handleAxesSwapping","yAxis","_useDebouncedCallback","_useDebouncedCallback2","_slicedToArray","debouncedOnOptionsChange","createElement","Fragment","label","defaultValue","onChange","defaultChecked","checked","key","areAxesSwapped","coefficient","sizemode","mode","Option","direction","piesort","val","traceorder","showpoints","event","target","stacking","disabled","percentValues","missingValuesAsZero","enableLink","linkOpenNewTab","arrowPointAtCenter","icon","defaultIcon","placeholder","linkFormat","e","propTypes"],"sources":["../../../../src/visualizations/chart/Editor/GeneralSettings.tsx"],"sourcesContent":["import { isArray, map, mapValues, includes, some, each, difference, toNumber } from \"lodash\";\nimport React, { useMemo } from \"react\";\nimport { Section, Select, Checkbox, InputNumber, ContextHelp, Input } from \"@/components/visualizations/editor\";\nimport { UpdateOptionsStrategy } from \"@/components/visualizations/editor/createTabbedEditor\";\nimport { EditorPropTypes } from \"@/visualizations/prop-types\";\nimport { AllColorPalettes } from \"@/visualizations/ColorPalette\";\nimport ChartTypeSelect from \"./ChartTypeSelect\";\nimport ColumnMappingSelect from \"./ColumnMappingSelect\";\nimport { useDebouncedCallback } from \"use-debounce/lib\";\n\nfunction getAvailableColumnMappingTypes(options: any) {\n  const result = [\"x\", \"y\"];\n\n  if (!includes([\"custom\", \"heatmap\"], options.globalSeriesType)) {\n    result.push(\"series\");\n  }\n\n  if (options.globalSeriesType === \"bubble\" || some(options.seriesOptions, { type: \"bubble\" })) {\n    result.push(\"size\");\n  }\n\n  if (options.globalSeriesType === \"heatmap\") {\n    result.push(\"zVal\");\n  }\n\n  if (!includes([\"custom\", \"bubble\", \"heatmap\"], options.globalSeriesType)) {\n    result.push(\"yError\");\n  }\n\n  return result;\n}\n\nfunction getMappedColumns(options: any, availableColumns: any) {\n  const mappedColumns = {};\n  const availableTypes = getAvailableColumnMappingTypes(options);\n  each(availableTypes, type => {\n    // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n    mappedColumns[type] = ColumnMappingSelect.MappingTypes[type].multiple ? [] : null;\n  });\n\n  availableColumns = map(availableColumns, c => c.name);\n  const usedColumns: any = [];\n\n  each(options.columnMapping, (type, column) => {\n    if (includes(availableColumns, column) && includes(availableTypes, type)) {\n      // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n      const { multiple } = ColumnMappingSelect.MappingTypes[type];\n      if (multiple) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        mappedColumns[type].push(column);\n      } else {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        mappedColumns[type] = column;\n      }\n      usedColumns.push(column);\n    }\n  });\n\n  return {\n    mappedColumns,\n    unusedColumns: difference(availableColumns, usedColumns),\n  };\n}\n\nfunction mappedColumnsToColumnMappings(mappedColumns: any) {\n  const result = {};\n  each(mappedColumns, (value, type) => {\n    if (isArray(value)) {\n      each(value, v => {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        result[v] = type;\n      });\n    } else {\n      if (value) {\n        // @ts-expect-error ts-migrate(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message\n        result[value] = type;\n      }\n    }\n  });\n  return result;\n}\n\nexport default function GeneralSettings({ options, data, onOptionsChange }: any) {\n  const { mappedColumns, unusedColumns } = useMemo(() => getMappedColumns(options, data.columns), [\n    options,\n    data.columns,\n  ]);\n\n  function handleGlobalSeriesTypeChange(globalSeriesType: any) {\n    onOptionsChange({\n      globalSeriesType,\n      showDataLabels: globalSeriesType === \"pie\",\n      swappedAxes: false,\n      seriesOptions: mapValues(options.seriesOptions, series => ({\n        ...series,\n        type: globalSeriesType,\n      })),\n    });\n  }\n\n  function handleColumnMappingChange(column: any, type: any) {\n    const columnMapping = mappedColumnsToColumnMappings({\n      ...mappedColumns,\n      [type]: column,\n    });\n    onOptionsChange({ columnMapping }, UpdateOptionsStrategy.shallowMerge);\n  }\n\n  function handleLegendPlacementChange(value: any) {\n    if (value === \"hidden\") {\n      onOptionsChange({ legend: { enabled: false } });\n    } else {\n      onOptionsChange({ legend: { enabled: true, placement: value } });\n    }\n  }\n\n  function handleAxesSwapping() {\n    // moves any item in the right Y axis to the left one\n    const seriesOptions = mapValues(options.seriesOptions, series => ({\n      ...series,\n      yAxis: 0,\n    }));\n    onOptionsChange({ swappedAxes: !options.swappedAxes, seriesOptions });\n  }\n\n  const [debouncedOnOptionsChange] = useDebouncedCallback(onOptionsChange, 200);\n\n  return (\n    <React.Fragment>\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <ChartTypeSelect\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '{ label: string; \"data-test\": string; defaul... Remove this comment to see the full error message\n          label=\"Chart Type\"\n          data-test=\"Chart.GlobalSeriesType\"\n          defaultValue={options.globalSeriesType}\n          onChange={handleGlobalSeriesTypeChange}\n        />\n      </Section>\n\n      {includes([\"column\", \"line\", \"box\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.SwappedAxes\"\n            defaultChecked={options.swappedAxes}\n            checked={options.swappedAxes}\n            onChange={handleAxesSwapping}>\n            Horizontal Chart\n          </Checkbox>\n        </Section>\n      )}\n\n      {map(mappedColumns, (value, type) => (\n        <ColumnMappingSelect\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          key={type}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'never'.\n          type={type}\n          value={value}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'any' is not assignable to type 'never'.\n          areAxesSwapped={options.swappedAxes}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type 'unknown[]' is not assignable to type 'never'... Remove this comment to see the full error message\n          availableColumns={unusedColumns}\n          // @ts-expect-error ts-migrate(2322) FIXME: Type '(column: any, type: any) => void' is not ass... Remove this comment to see the full error message\n          onChange={handleColumnMappingChange}\n        />\n      ))}\n\n      {includes([\"bubble\"], options.globalSeriesType) && (\n        <React.Fragment>\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <InputNumber\n              label=\"Bubble Size Coefficient\"\n              data-test=\"Chart.BubbleCoefficient\"\n              defaultValue={options.coefficient}\n              onChange={(value: any) => onOptionsChange({ coefficient: toNumber(value) })}\n            />\n          </Section>\n\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <Select\n              label=\"Bubble Size Proportional To\"\n              data-test=\"Chart.SizeMode\"\n              defaultValue={options.sizemode}\n              onChange={(mode: any) => onOptionsChange({ sizemode: mode })}>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"area\" data-test=\"Chart.SizeMode.Area\">\n                Area\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"diameter\" data-test=\"Chart.SizeMode.Diameter\">\n                Diameter\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n            </Select>\n          </Section>\n        </React.Fragment>\n      )}\n\n      {includes([\"pie\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Direction\"\n            data-test=\"Chart.PieDirection\"\n            defaultValue={options.direction.type}\n            onChange={(type: any) => onOptionsChange({ direction: { type } })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"counterclockwise\" data-test=\"Chart.PieDirection.Counterclockwise\">\n              Counterclockwise\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"clockwise\" data-test=\"Chart.PieDirection.Clockwise\">\n              Clockwise\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n          <Select\n            label=\"Sort\"\n            defaultValue={options.piesort}\n            onChange={(val: any) => onOptionsChange({ piesort: val })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={true}>\n              True\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={false}>\n              False\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\n        <React.Fragment>\n          {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n          <Section>\n            <Select\n              label=\"Legend Placement\"\n              data-test=\"Chart.LegendPlacement\"\n              value={options.legend.enabled ? options.legend.placement : \"hidden\"}\n              onChange={handleLegendPlacementChange}>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"hidden\" data-test=\"Chart.LegendPlacement.HideLegend\">\n                Hide legend\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"auto\" data-test=\"Chart.LegendPlacement.Auto\">\n                Right\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              <Select.Option value=\"below\" data-test=\"Chart.LegendPlacement.Below\">\n                Bottom\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n              </Select.Option>\n            </Select>\n          </Section>\n\n          {options.legend.enabled && (\n            // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n            <Section>\n              <Select\n                label=\"Legend Items Order\"\n                data-test=\"Chart.LegendItemsOrder\"\n                value={options.legend.traceorder}\n                onChange={(traceorder: any) => onOptionsChange({ legend: { traceorder } })}>\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                <Select.Option value=\"normal\" data-test=\"Chart.LegendItemsOrder.Normal\">\n                  Normal\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n                {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                <Select.Option value=\"reversed\" data-test=\"Chart.LegendItemsOrder.Reversed\">\n                  Reversed\n                  {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n                </Select.Option>\n              </Select>\n            </Section>\n          )}\n        </React.Fragment>\n      )}\n\n      {includes([\"box\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.ShowPoints\"\n            defaultChecked={options.showpoints}\n            onChange={event => onOptionsChange({ showpoints: event.target.checked })}>\n            Show All Points\n          </Checkbox>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Stacking\"\n            data-test=\"Chart.Stacking\"\n            defaultValue={options.series.stacking}\n            disabled={!includes([\"line\", \"area\", \"column\"], options.globalSeriesType)}\n            onChange={(stacking: any) => onOptionsChange({ series: { stacking } })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={null} data-test=\"Chart.Stacking.Disabled\">\n              Disabled\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value=\"stack\" data-test=\"Chart.Stacking.Stack\">\n              Stack\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {includes([\"line\", \"area\", \"column\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Checkbox\n            data-test=\"Chart.NormalizeValues\"\n            defaultChecked={options.series.percentValues}\n            onChange={event => onOptionsChange({ series: { percentValues: event.target.checked } })}>\n            Normalize values to percentage\n          </Checkbox>\n        </Section>\n      )}\n\n      {!includes([\"custom\", \"heatmap\", \"bubble\", \"scatter\"], options.globalSeriesType) && (\n        // @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message\n        <Section>\n          <Select\n            label=\"Missing and NULL values\"\n            data-test=\"Chart.MissingValues\"\n            defaultValue={options.missingValuesAsZero ? 1 : 0}\n            onChange={(value: any) => onOptionsChange({ missingValuesAsZero: !!value })}>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={0} data-test=\"Chart.MissingValues.Keep\">\n              Do not display in chart\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n            {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            <Select.Option value={1} data-test=\"Chart.MissingValues.Zero\">\n              Convert to 0 and display in chart\n              {/* @ts-expect-error ts-migrate(2339) FIXME: Property 'Option' does not exist on type '({ class... Remove this comment to see the full error message */}\n            </Select.Option>\n          </Select>\n        </Section>\n      )}\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Chart.EnableClickEvents\"\n          defaultChecked={options.enableLink}\n          onChange={event => onOptionsChange({ enableLink: event.target.checked })}>\n          Enable click events\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Checkbox\n          data-test=\"Chart.EnableClickEvents.NewTab\"\n          defaultChecked={options.linkOpenNewTab}\n          onChange={event => onOptionsChange({ linkOpenNewTab: event.target.checked })}\n          disabled={!(options.enableLink === true)}\n        >\n          Open in new tab\n        </Checkbox>\n      </Section>\n\n      {/* @ts-expect-error ts-migrate(2745) FIXME: This JSX tag's 'children' prop expects type 'never... Remove this comment to see the full error message */}\n      <Section>\n        <Input\n          label={\n            <React.Fragment>\n              URL template\n              {/* @ts-expect-error ts-migrate(2746) FIXME: This JSX tag's 'children' prop expects a single ch... Remove this comment to see the full error message */}\n              <ContextHelp\n                placement=\"topLeft\"\n                arrowPointAtCenter\n                // @ts-expect-error ts-migrate(2322) FIXME: Type 'Element' is not assignable to type 'null | u... Remove this comment to see the full error message\n                icon={ContextHelp.defaultIcon}>\n                <div>\n                  Every curve can be referenced using <code>{\"{{ @@x1 }} {{ @@y1 }} {{ @@x2 }} {{ @@y2 }} ...\"}</code> syntax:<br/>\n                  axis with any curve number according to the Series config.\n                </div>\n                <div>\n                  The first met curve X and Y values can be referenced by just<code>{\"{{ @@x }} {{ @@y }}\"}</code> syntax.\n                </div>\n                <div>\n                  Any unresolved reference would be replaced with an empty string.\n                </div>\n              </ContextHelp>\n            </React.Fragment>\n          }\n          data-test=\"Chart.DataLabels.TextFormat\"\n          placeholder=\"(nothing)\"\n          defaultValue={options.linkFormat}\n          onChange={(e: any) => debouncedOnOptionsChange({ linkFormat: e.target.value })}\n          disabled={!(options.enableLink === true)}\n        />\n      </Section>\n    </React.Fragment>\n  );\n}\n\nGeneralSettings.propTypes = EditorPropTypes;\n"],"mappings":"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"}
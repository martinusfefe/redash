{"version":3,"file":"DataLabelsSettings.test.js","names":["_react","_interopRequireDefault","require","_enzyme","_getOptions","_DataLabelsSettings","obj","__esModule","default","findByTestID","wrapper","testId","find","concat","mount","options","done","getOptions","enzyme","createElement","visualizationName","data","columns","rows","onOptionsChange","changedOptions","expect","toMatchSnapshot","describe","test","el","globalSeriesType","showDataLabels","last","simulate","target","checked","numberFormat","value","percentFormat","dateTimeFormat","textFormat"],"sources":["../../../../src/visualizations/chart/Editor/DataLabelsSettings.test.tsx"],"sourcesContent":["import React from \"react\";\nimport enzyme from \"enzyme\";\n\nimport getOptions from \"../getOptions\";\nimport DataLabelsSettings from \"./DataLabelsSettings\";\n\nfunction findByTestID(wrapper: any, testId: any) {\n  return wrapper.find(`[data-test=\"${testId}\"]`);\n}\n\nfunction mount(options: any, done: any) {\n  options = getOptions(options);\n  return enzyme.mount(\n    <DataLabelsSettings\n      visualizationName=\"Test\"\n      data={{ columns: [], rows: [] }}\n      options={options}\n      onOptionsChange={changedOptions => {\n        expect(changedOptions).toMatchSnapshot();\n        done();\n      }}\n    />\n  );\n}\n\ndescribe(\"Visualizations -> Chart -> Editor -> Data Labels Settings\", () => {\n  test(\"Sets Show Data Labels option\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        showDataLabels: false,\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.DataLabels.ShowDataLabels\")\n      .last()\n      .find(\"input\")\n      .simulate(\"change\", { target: { checked: true } });\n  });\n\n  test(\"Changes number format\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        numberFormat: \"0[.]0000\",\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.DataLabels.NumberFormat\")\n      .last()\n      .simulate(\"change\", { target: { value: \"0.00\" } });\n  });\n\n  test(\"Changes percent values format\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        percentFormat: \"0[.]00%\",\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.DataLabels.PercentFormat\")\n      .last()\n      .simulate(\"change\", { target: { value: \"0.0%\" } });\n  });\n\n  test(\"Changes date/time format\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        dateTimeFormat: \"YYYY-MM-DD HH:mm:ss\",\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.DataLabels.DateTimeFormat\")\n      .last()\n      .simulate(\"change\", { target: { value: \"YYYY MMM DD\" } });\n  });\n\n  test(\"Changes data labels format\", done => {\n    const el = mount(\n      {\n        globalSeriesType: \"column\",\n        textFormat: null,\n      },\n      done\n    );\n\n    findByTestID(el, \"Chart.DataLabels.TextFormat\")\n      .last()\n      .simulate(\"change\", { target: { value: \"{{ @@x }} :: {{ @@y }} / {{ @@yPercent }}\" } });\n  });\n});\n"],"mappings":"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"}